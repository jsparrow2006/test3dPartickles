!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.particles3d=t():e.particles3d=t()}(this,(function(){return function(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=1)}([function(e){e.exports=JSON.parse('{"addforce.frag":"precision highp float;\\n\\nvarying vec2 v_coordinates;\\n\\nuniform sampler2D u_velocityTexture;\\n\\nuniform vec3 u_mouseVelocity;\\n\\nuniform vec3 u_gridResolution;\\nuniform vec3 u_gridSize;\\n\\nuniform vec3 u_mouseRayOrigin;\\nuniform vec3 u_mouseRayDirection;\\n\\nuniform float u_timeStep;\\n\\nfloat kernel (vec3 position, float radius) {\\n    vec3 worldPosition = (position / u_gridResolution) * u_gridSize;\\n\\n    float distanceToMouseRay = length(cross(u_mouseRayDirection, worldPosition - u_mouseRayOrigin));\\n\\n    float normalizedDistance = max(0.0, distanceToMouseRay / radius);\\n    return smoothstep(1.0, 0.9, normalizedDistance);\\n}\\n\\nvoid main () {\\n    vec3 velocity = texture2D(u_velocityTexture, v_coordinates).rgb;\\n\\n    vec3 newVelocity = velocity + vec3(0.0, -40.0 * u_timeStep, 0.0); //add gravity\\n\\n    vec3 cellIndex = floor(get3DFragCoord(u_gridResolution + 1.0));\\n    vec3 xPosition = vec3(cellIndex.x, cellIndex.y + 0.5, cellIndex.z + 0.5);\\n    vec3 yPosition = vec3(cellIndex.x + 0.5, cellIndex.y, cellIndex.z + 0.5);\\n    vec3 zPosition = vec3(cellIndex.x + 0.5, cellIndex.y + 0.5, cellIndex.z);\\n\\n    float mouseRadius = 5.0;\\n    vec3 kernelValues = vec3(kernel(xPosition, mouseRadius), kernel(yPosition, mouseRadius), kernel(zPosition, mouseRadius));\\n\\n    newVelocity += u_mouseVelocity * kernelValues * 3.0 * smoothstep(0.0, 1.0 / 200.0, u_timeStep);\\n\\n    gl_FragColor = vec4(newVelocity * 1.0, 0.0);\\n}\\n","advect.frag":"//advects particle positions with second order runge kutta\\n\\nvarying vec2 v_coordinates;\\n\\nuniform sampler2D u_positionsTexture;\\nuniform sampler2D u_randomsTexture;\\n\\nuniform sampler2D u_velocityGrid;\\n\\nuniform vec3 u_gridResolution;\\nuniform vec3 u_gridSize;\\n\\nuniform float u_timeStep;\\n\\nuniform float u_frameNumber;\\n\\nuniform vec2 u_particlesResolution;\\n\\nfloat sampleXVelocity (vec3 position) {\\n    vec3 cellIndex = vec3(position.x, position.y - 0.5, position.z - 0.5);\\n    return texture3D(u_velocityGrid, (cellIndex + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).x;\\n}\\n\\nfloat sampleYVelocity (vec3 position) {\\n    vec3 cellIndex = vec3(position.x - 0.5, position.y, position.z - 0.5);\\n    return texture3D(u_velocityGrid, (cellIndex + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).y;\\n}\\n\\nfloat sampleZVelocity (vec3 position) {\\n    vec3 cellIndex = vec3(position.x - 0.5, position.y - 0.5, position.z);\\n    return texture3D(u_velocityGrid, (cellIndex + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).z;\\n}\\n\\nvec3 sampleVelocity (vec3 position) {\\n    vec3 gridPosition = (position / u_gridSize) * u_gridResolution;\\n    return vec3(sampleXVelocity(gridPosition), sampleYVelocity(gridPosition), sampleZVelocity(gridPosition));\\n}\\n\\nvoid main () {\\n    vec3 position = texture2D(u_positionsTexture, v_coordinates).rgb;\\n    vec3 randomDirection = texture2D(u_randomsTexture, fract(v_coordinates + u_frameNumber / u_particlesResolution)).rgb;\\n\\n    vec3 velocity = sampleVelocity(position);\\n\\n    vec3 halfwayPosition = position + velocity * u_timeStep * 0.5;\\n    vec3 halfwayVelocity = sampleVelocity(halfwayPosition);\\n\\n    vec3 step = halfwayVelocity * u_timeStep;\\n\\n    step += 0.05 * randomDirection * length(velocity) * u_timeStep;\\n\\n    //step = clamp(step, -vec3(1.0), vec3(1.0)); //enforce CFL condition\\n\\n    vec3 newPosition = position + step;\\n\\n    newPosition = clamp(newPosition, vec3(0.01), u_gridSize - 0.01);\\n\\n    gl_FragColor = vec4(newPosition, 0.0);\\n}\\n","background.frag":"precision highp float;\\n\\nvarying vec2 v_position;\\n\\nvoid main () {\\n    vec3 backgroundColor = vec3(0.0) - length(v_position) * 0.1;\\n    gl_FragColor = vec4(backgroundColor, 1.0);\\n}\\n","background.vert":"precision highp float;\\n\\nattribute vec2 a_position;\\n\\nvarying vec2 v_position;\\n\\nvoid main () {\\n    v_position = a_position;\\n    gl_Position = vec4(a_position, 0.0, 1.0);\\n}\\n","box.frag":"precision highp float;\\n\\nvarying vec3 v_cubePosition;\\n\\nuniform vec3 u_highlightSide;\\nuniform vec3 u_highlightColor;\\n\\nvoid main () {\\n    float epsilon = 0.001;\\n    vec3 normalizedCubePosition = v_cubePosition * 2.0 - 1.0;\\n\\n    if (abs(normalizedCubePosition.x - u_highlightSide.x) < epsilon || abs(normalizedCubePosition.y - u_highlightSide.y) < epsilon || abs(normalizedCubePosition.z - u_highlightSide.z) < epsilon ) {\\n        gl_FragColor = vec4(u_highlightColor, 1.0);\\n    } else {\\n        gl_FragColor = vec4(vec3(0.97), 1.0);\\n    }\\n}\\n","box.vert":"precision highp float;\\n\\nattribute vec3 a_cubeVertexPosition;\\n\\nuniform vec3 u_translation;\\nuniform vec3 u_scale;\\n\\nuniform mat4 u_viewMatrix;\\nuniform mat4 u_projectionMatrix;\\n\\nvarying vec3 v_cubePosition;\\n\\nvoid main () {\\n    v_cubePosition = a_cubeVertexPosition;\\n\\n    gl_Position = u_projectionMatrix * u_viewMatrix * vec4(a_cubeVertexPosition * u_scale + u_translation, 1.0);\\n}\\n","boxwireframe.frag":"precision highp float;\\n\\nvoid main () {\\n    gl_FragColor = vec4(0.5, 0.5, 0.5, 1.0);\\n}\\n","boxwireframe.vert":"precision highp float;\\n\\nattribute vec3 a_cubeVertexPosition;\\n\\nuniform vec3 u_translation;\\nuniform vec3 u_scale;\\n\\nuniform mat4 u_viewMatrix;\\nuniform mat4 u_projectionMatrix;\\n\\nvoid main () {\\n    gl_Position = u_projectionMatrix * u_viewMatrix * vec4(a_cubeVertexPosition * u_scale + u_translation, 1.0);\\n}\\n","common.frag":"precision highp float;\\n\\nvec3 get3DFragCoord (vec3 resolution) {\\n    return vec3(\\n        mod(gl_FragCoord.x, resolution.x),\\n        gl_FragCoord.y,\\n        floor(gl_FragCoord.x / resolution.x) + 0.5);\\n}\\n\\nvec4 texture3D(sampler2D texture, vec3 coordinates, vec3 resolution) {\\n    vec3 fullCoordinates = coordinates * resolution; //in [(0, 0, 0), (resolution.x, resolution.y, resolutionz)] \\n\\n    fullCoordinates = clamp(fullCoordinates, vec3(0.5), vec3(resolution - 0.5));\\n\\n    //belowZIndex and aboveZIndex don\'t have the 0.5 offset\\n    float belowZIndex = floor(fullCoordinates.z - 0.5);\\n    float aboveZIndex = belowZIndex + 1.0; \\n\\n    //we interpolate the z\\n    float fraction = fract(fullCoordinates.z - 0.5);\\n\\n    vec2 belowCoordinates = vec2(\\n        belowZIndex * resolution.x + fullCoordinates.x,\\n        fullCoordinates.y) / vec2(resolution.x * resolution.z, resolution.y);\\n\\n    vec2 aboveCoordinates = vec2(\\n        aboveZIndex * resolution.x + fullCoordinates.x,\\n        fullCoordinates.y) / vec2(resolution.x * resolution.z, resolution.y);\\n\\n    return mix(texture2D(texture, belowCoordinates), texture2D(texture, aboveCoordinates), fraction);\\n}\\n\\nvec4 texture3DNearest(sampler2D texture, vec3 coordinates, vec3 resolution) { //clamps the z coordinate\\n    vec3 fullCoordinates = coordinates * resolution; //in [(0, 0, 0), (resolution.x, resolution.y, resolutionz)] \\n\\n    fullCoordinates = clamp(fullCoordinates, vec3(0.5), vec3(resolution - 0.5));\\n\\n    float zIndex = floor(fullCoordinates.z);\\n\\n    vec2 textureCoordinates = vec2(\\n        zIndex * resolution.x + fullCoordinates.x,\\n        fullCoordinates.y) / vec2(resolution.x * resolution.z, resolution.y);\\n\\n    return texture2D(texture, textureCoordinates);\\n}\\n\\n","composite.frag":"precision highp float;\\n\\nvarying vec2 v_coordinates;\\n\\nuniform sampler2D u_renderingTexture;\\nuniform sampler2D u_occlusionTexture;\\n\\nuniform vec2 u_resolution;\\nuniform float u_fov;\\n\\nuniform mat4 u_inverseViewMatrix;\\n\\nuniform sampler2D u_shadowDepthTexture;\\nuniform vec2 u_shadowResolution;\\nuniform mat4 u_lightProjectionViewMatrix;\\nuniform vec3 u_color1;\\nuniform vec3 u_color2;\\n\\nfloat linearstep (float left, float right, float x) {\\n    return clamp((x - left) / (right - left), 0.0, 1.0);\\n}\\n\\nvec3 hsvToRGB(vec3 c) {\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvoid main () {\\n    vec4 data = texture2D(u_renderingTexture, v_coordinates);\\n    float occlusion = texture2D(u_occlusionTexture, v_coordinates).r;\\n\\n    vec3 viewSpaceNormal = vec3(data.x, data.y, sqrt(1.0 - data.x * data.x - data.y * data.y));\\n\\n    float viewSpaceZ = data.a;\\n    vec3 viewRay = vec3(\\n        (v_coordinates.x * 2.0 - 1.0) * tan(u_fov / 2.0) * u_resolution.x / u_resolution.y,\\n        (v_coordinates.y * 2.0 - 1.0) * tan(u_fov / 2.0),\\n        -1.0);\\n\\n    vec3 viewSpacePosition = viewRay * -viewSpaceZ;\\n    vec3 worldSpacePosition = vec3(u_inverseViewMatrix * vec4(viewSpacePosition, 1.0));\\n\\n    float speed = data.b;\\n    // vec3 color = hsvToRGB(vec3(max(0.6 - speed * 0.0025, 0.52), 0.75, 1.0));\\n\\n    vec3 color;\\n    vec3 COLORS[2];\\n    COLORS[0] = vec3(0.464, 0.0, 1.0);\\n    COLORS[1] = vec3(1.0, 0.31, 0.071);\\n\\n    if (data.b <= 15.0) {\\n        color = u_color1;\\n    } else {\\n        color = u_color2;\\n    }\\n\\n\\n    vec4 lightSpacePosition = u_lightProjectionViewMatrix * vec4(worldSpacePosition, 1.0);\\n    lightSpacePosition /= lightSpacePosition.w;\\n    lightSpacePosition *= 0.5;\\n    lightSpacePosition += 0.5;\\n    vec2 lightSpaceCoordinates = lightSpacePosition.xy;\\n    \\n    float shadow = 1.0;\\n    const int PCF_WIDTH = 2;\\n    const float PCF_NORMALIZATION = float(PCF_WIDTH * 2 + 1) * float(PCF_WIDTH * 2 + 1);\\n\\n    for (int xOffset = -PCF_WIDTH; xOffset <= PCF_WIDTH; ++xOffset) {\\n        for (int yOffset = -PCF_WIDTH; yOffset <= PCF_WIDTH; ++yOffset) {\\n            float shadowSample = texture2D(u_shadowDepthTexture, lightSpaceCoordinates + 5.0 * vec2(float(xOffset), float(yOffset)) / u_shadowResolution).r;\\n            if (lightSpacePosition.z > shadowSample + 0.001) shadow -= 1.0 / PCF_NORMALIZATION;\\n        }\\n    }\\n\\n\\n    float ambient = 1.0 - occlusion * 0.7;\\n    float direct = 1.0 - (1.0 - shadow) * 0.8;\\n\\n    color *= ambient * direct;\\n\\n    if (speed >= 0.0) {\\n        gl_FragColor = vec4(color, 1.0);\\n    } else {\\n        vec3 backgroundColor = vec3(0.1) - length(v_coordinates * 2.0 - 1.0) * 0.1;\\n        gl_FragColor = vec4(backgroundColor, 1.0);\\n    }\\n\\n    //gl_FragColor = vec4(texture2D(u_shadowDepthTexture, v_coordinates).rrr, 1.0);\\n}\\n","copy.frag":"precision highp float;\\n\\nuniform sampler2D u_texture;\\n\\nvarying vec2 v_coordinates;\\n\\nvoid main () {\\n    gl_FragColor = texture2D(u_texture, v_coordinates);\\n}\\n","divergence.frag":"precision highp float;\\n\\nvarying vec2 v_coordinates;\\n\\nuniform sampler2D u_velocityTexture;\\nuniform sampler2D u_markerTexture;\\nuniform sampler2D u_weightTexture;\\n\\nuniform vec3 u_gridResolution;\\n\\nuniform float u_maxDensity;\\n\\nvoid main () {\\n    vec3 cellIndex = floor(get3DFragCoord(u_gridResolution));\\n\\n    //divergence = 0 in air cells\\n    float fluidCell = texture3DNearest(u_markerTexture, (cellIndex + 0.5) / u_gridResolution, u_gridResolution).x;\\n    if (fluidCell == 0.0) discard;\\n\\n\\n    float leftX = texture3DNearest(u_velocityTexture, (cellIndex + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).x;\\n    float rightX = texture3DNearest(u_velocityTexture, (cellIndex + vec3(1.0, 0.0, 0.0) + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).x;\\n\\n    float bottomY = texture3DNearest(u_velocityTexture, (cellIndex + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).y;\\n    float topY = texture3DNearest(u_velocityTexture, (cellIndex + vec3(0.0, 1.0, 0.0) + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).y;\\n\\n    float backZ = texture3DNearest(u_velocityTexture, (cellIndex + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).z;\\n    float frontZ = texture3DNearest(u_velocityTexture, (cellIndex + vec3(0.0, 0.0, 1.0) + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).z;\\n\\n    float divergence = ((rightX - leftX) + (topY - bottomY) + (frontZ - backZ)) / 1.0;\\n\\n    float density = texture3DNearest(u_weightTexture, (cellIndex + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).a;\\n    divergence -= max((density - u_maxDensity) * 1.0, 0.0); //volume conservation\\n\\n    gl_FragColor = vec4(divergence, 0.0, 0.0, 0.0);\\n}\\n","enforceboundaries.frag":"//sets the velocities at the boundary cells\\n\\nprecision highp float;\\n\\nvarying vec2 v_coordinates;\\n\\nuniform sampler2D u_velocityTexture;\\n\\nuniform vec3 u_gridResolution;\\n\\nvoid main () {\\n    vec3 velocity = texture2D(u_velocityTexture, v_coordinates).rgb;\\n    vec3 cellIndex = floor(get3DFragCoord(u_gridResolution + 1.0));\\n\\n    if (cellIndex.x < 0.5) {\\n        velocity.x = 0.0;\\n    }\\n\\n    if (cellIndex.x > u_gridResolution.x - 0.5) {\\n        velocity.x = 0.0;\\n    }\\n\\n    if (cellIndex.y < 0.5) {\\n        velocity.y = 0.0;\\n    }\\n\\n    if (cellIndex.y > u_gridResolution.y - 0.5) {\\n        velocity.y = min(velocity.y, 0.0);\\n    }\\n\\n    if (cellIndex.z < 0.5) {\\n        velocity.z = 0.0;\\n    }\\n\\n    if (cellIndex.z > u_gridResolution.z - 0.5) {\\n        velocity.z = 0.0;\\n    }\\n\\n    gl_FragColor = vec4(velocity, 0.0);\\n}\\n","extendvelocity.frag":"precision highp float;\\n\\nvarying vec2 v_coordinates;\\n\\nuniform vec2 u_gridResolution;\\n\\nuniform sampler2D u_velocityTexture;\\nuniform sampler2D u_weightTexture;\\n\\nvoid main () {\\n    vec2 velocity = texture2D(u_velocityTexture, v_coordinates).rg;\\n\\n    vec2 delta = 1.0 / (u_gridResolution + 1.0);\\n\\n    bool airX = texture2D(u_weightTexture, v_coordinates).x == 0.0;\\n    bool airY = texture2D(u_weightTexture, v_coordinates).y == 0.0;\\n\\n    float closestXDistance = 100000.0;\\n    float closestYDistance = 100000.0;\\n\\n    if (airX || airY) {\\n        const int SEARCH_WIDTH = 1;\\n        for (int y = -SEARCH_WIDTH; y <= SEARCH_WIDTH; ++y) {\\n            for (int x = -SEARCH_WIDTH; x <= SEARCH_WIDTH; ++x) {\\n                if (x != 0 && y != 0) {\\n                    vec2 coordinates = v_coordinates + vec2(float(x), float(y)) * delta;\\n                    float dist = float(x) * float(x) + float(y) * float(y);\\n\\n                    if (texture2D(u_weightTexture, coordinates).x > 0.0 && dist < closestXDistance && airX) {\\n                        closestXDistance = dist;\\n                        velocity.x = texture2D(u_velocityTexture, coordinates).r;\\n                    }\\n\\n                    if (texture2D(u_weightTexture, coordinates).y > 0.0 && dist < closestYDistance && airY) {\\n                        closestYDistance = dist;\\n                        velocity.y = texture2D(u_velocityTexture, coordinates).g;\\n                    }\\n\\n                }\\n            }\\n        }\\n\\n    }\\n\\n    gl_FragColor = vec4(velocity, 0.0, 0.0);\\n}\\n","fullscreen.vert":"precision highp float;\\n\\nattribute vec2 a_position;\\n\\nvarying vec2 v_coordinates;\\n\\nvoid main () {\\n    v_coordinates = a_position * 0.5 + 0.5;\\n\\n    gl_Position = vec4(a_position, 0.0, 1.0);\\n}\\n","fxaa.frag":"precision highp float;\\n\\nvarying vec2 v_coordinates;\\n\\nuniform sampler2D u_input;\\n\\nuniform vec2 u_resolution;\\n\\nconst float FXAA_SPAN_MAX = 8.0;\\nconst float FXAA_REDUCE_MUL = 1.0 / 8.0;\\nconst float FXAA_REDUCE_MIN = 1.0 / 128.0;\\n \\nvoid main () {\\n    vec2 delta = 1.0 / u_resolution;\\n\\n    vec3 rgbNW = texture2D(u_input, v_coordinates + vec2(-1.0, -1.0) * delta).rgb;\\n    vec3 rgbNE = texture2D(u_input, v_coordinates + vec2(1.0, -1.0) * delta).rgb;\\n    vec3 rgbSW = texture2D(u_input, v_coordinates + vec2(-1.0, 1.0) * delta).rgb;\\n    vec3 rgbSE = texture2D(u_input, v_coordinates + vec2(1.0, 1.0) * delta).rgb;\\n    vec3 rgbM = texture2D(u_input, v_coordinates).rgb;\\n\\n    vec3 luma = vec3(0.299, 0.587, 0.114);\\n    float lumaNW = dot(rgbNW, luma);\\n    float lumaNE = dot(rgbNE, luma);\\n    float lumaSW = dot(rgbSW, luma);\\n    float lumaSE = dot(rgbSE, luma);\\n    float lumaM  = dot(rgbM,  luma);\\n\\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\\n\\n    vec2 dir = vec2(\\n        -((lumaNW + lumaNE) - (lumaSW + lumaSE)),\\n        ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\\n\\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\\n    dir = min(vec2(FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX), dir * rcpDirMin)) * delta.xy;\\n\\n    vec3 rgbA = 0.5 * (texture2D(u_input, v_coordinates.xy + dir * (1.0 / 3.0 - 0.5)).xyz + texture2D(u_input, v_coordinates.xy + dir * (2.0 / 3.0 - 0.5)).xyz);\\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (texture2D(u_input, v_coordinates.xy + dir * -0.5).xyz + texture2D(u_input, v_coordinates.xy + dir * 0.5).xyz);\\n    float lumaB = dot(rgbB, luma);\\n    if (lumaB < lumaMin || lumaB > lumaMax) {\\n        gl_FragColor = vec4(rgbA, 1.0);\\n    } else {\\n        gl_FragColor = vec4(rgbB, 1.0);\\n    }\\n}\\n","grid.frag":"precision highp float;\\n\\nvoid main () {\\n    gl_FragColor = vec4(0.8, 0.8, 0.8, 1.0);\\n}\\n","grid.vert":"precision highp float;\\n\\nattribute vec3 a_vertexPosition;\\n\\nuniform vec3 u_translation;\\n\\nuniform mat4 u_viewMatrix;\\nuniform mat4 u_projectionMatrix;\\n\\nvoid main () {\\n    gl_Position = u_projectionMatrix * u_viewMatrix * vec4(u_translation + a_vertexPosition, 1.0);\\n}\\n","jacobi.frag":"precision highp float;\\n\\nvarying vec2 v_coordinates;\\n\\nuniform vec3 u_gridResolution;\\n\\nuniform sampler2D u_pressureTexture;\\nuniform sampler2D u_divergenceTexture;\\nuniform sampler2D u_markerTexture;\\n\\nvoid main () {\\n    vec3 centerCoords = get3DFragCoord(u_gridResolution) / u_gridResolution;\\n\\n    //pressure = 0 in air cells\\n    float fluidCell = texture3DNearest(u_markerTexture, centerCoords, u_gridResolution).x;\\n    if (fluidCell == 0.0) discard; //if this is an air cell\\n\\n    vec3 delta = 1.0 / u_gridResolution;\\n\\n    float divergenceCenter = texture3DNearest(u_divergenceTexture, centerCoords, u_gridResolution).r;\\n\\n    float left = texture3DNearest(u_pressureTexture, centerCoords + vec3(-delta.x, 0.0, 0.0), u_gridResolution).r;\\n    float right = texture3DNearest(u_pressureTexture, centerCoords + vec3(delta.x, 0.0, 0.0), u_gridResolution).r;\\n    float bottom = texture3DNearest(u_pressureTexture, centerCoords + vec3(0.0, -delta.y, 0.0), u_gridResolution).r;\\n    float top = texture3DNearest(u_pressureTexture, centerCoords + vec3(0.0, delta.y, 0.0), u_gridResolution).r;\\n    float back = texture3DNearest(u_pressureTexture, centerCoords + vec3(0.0, 0.0, -delta.z), u_gridResolution).r;\\n    float front = texture3DNearest(u_pressureTexture, centerCoords + vec3(0.0, 0.0, delta.z), u_gridResolution).r;\\n\\n    float newPressure = (left + right + bottom + top + back + front - divergenceCenter) / 6.0;\\n\\n\\n    gl_FragColor = vec4(newPressure, 0.0, 0.0, 0.0);\\n\\n}\\n","mark.frag":"precision highp float;\\n\\nvoid main () {\\n    gl_FragColor = vec4(1.0);\\n}\\n","mark.vert":"//marks pixels with 1.0 if there\'s a particle there\\n\\nprecision highp float;\\n\\nattribute vec2 a_textureCoordinates;\\n\\nuniform sampler2D u_positionTexture;\\n\\nuniform vec3 u_gridResolution;\\nuniform vec3 u_gridSize;\\n\\nvoid main () {\\n    gl_PointSize = 1.0;\\n\\n    vec3 position = texture2D(u_positionTexture, a_textureCoordinates).rgb;\\n    position = (position / u_gridSize) * u_gridResolution;\\n    vec3 cellIndex = floor(position);\\n\\n    vec2 textureCoordinates = vec2(\\n        cellIndex.z * u_gridResolution.x + cellIndex.x + 0.5,\\n        cellIndex.y + 0.5) / vec2(u_gridResolution.x * u_gridResolution.z, u_gridResolution.y);\\n\\n    gl_Position = vec4(textureCoordinates * 2.0 - 1.0, 0.0, 1.0);\\n}\\n","normalizegrid.frag":"//this does the divide in the weighted sum\\n\\nprecision highp float;\\n\\nvarying vec2 v_coordinates;\\n\\nuniform sampler2D u_accumulatedVelocityTexture;\\nuniform sampler2D u_weightTexture;\\n\\nvoid main () {\\n    vec3 accumulatedVelocity = texture2D(u_accumulatedVelocityTexture, v_coordinates).rgb;\\n    vec3 weight = texture2D(u_weightTexture, v_coordinates).rgb;\\n\\n    float xVelocity = 0.0;\\n    if (weight.x > 0.0) {\\n        xVelocity = accumulatedVelocity.x / weight.x;\\n    }\\n\\n    float yVelocity = 0.0;\\n    if (weight.y > 0.0) {\\n        yVelocity = accumulatedVelocity.y / weight.y;\\n    }\\n\\n    float zVelocity = 0.0;\\n    if (weight.z > 0.0) {\\n        zVelocity = accumulatedVelocity.z / weight.z;\\n    }\\n\\n    gl_FragColor = vec4(xVelocity, yVelocity, zVelocity, 0.0);\\n}\\n","particle.frag":"precision highp float;\\n\\nvarying vec3 v_velocity;\\n\\nvoid main () {\\n    gl_FragColor = vec4(v_velocity * 0.5 + 0.5, 1.0);\\n\\n    gl_FragColor = vec4(mix(vec3(0.0, 0.2, 0.9), vec3(1.0, 0.3, 0.2), length(v_velocity) * 0.1), 1.0);\\n}\\n","particle.vert":"precision highp float;\\n\\nattribute vec2 a_textureCoordinates; //the texture coordinates that this particle\'s info is stored at\\n\\nuniform sampler2D u_positionTexture;\\nuniform sampler2D u_velocityTexture;\\n\\nuniform vec2 u_resolution;\\n\\nvarying vec3 v_velocity;\\n\\nuniform mat4 u_projectionMatrix;\\nuniform mat4 u_viewMatrix;\\n\\nvoid main () {\\n    vec3 position = texture2D(u_positionTexture, a_textureCoordinates).rgb;\\n    vec3 velocity = texture2D(u_velocityTexture, a_textureCoordinates).rgb;\\n    v_velocity = velocity;\\n\\n    gl_PointSize = 1.0;\\n\\n    gl_Position = u_projectionMatrix * u_viewMatrix * vec4(position, 1.0);\\n}\\n","point.frag":"precision highp float;\\n\\nvoid main () {\\n    gl_FragColor = vec4(vec3(0.6), 1.0);\\n}\\n","point.vert":"precision highp float;\\n\\nattribute vec3 a_position;\\n\\nuniform vec3 u_position;\\n\\nuniform mat3 u_rotation;\\n\\nuniform mat4 u_viewMatrix;\\nuniform mat4 u_projectionMatrix;\\n\\nvoid main () {\\n    gl_Position = u_projectionMatrix * u_viewMatrix * vec4(u_position + u_rotation * a_position * 0.2, 1.0);\\n}\\n","sphere.frag":"precision highp float;\\n\\nvarying vec3 v_viewSpacePosition;\\nvarying vec3 v_viewSpaceNormal;\\nvarying float v_speed;\\n\\nvoid main () {\\n    gl_FragColor = vec4(v_viewSpaceNormal.x, v_viewSpaceNormal.y, v_speed, v_viewSpacePosition.z);\\n}\\n","sphere.vert":"precision highp float;\\n\\nattribute vec3 a_vertexPosition;\\nattribute vec3 a_vertexNormal;\\n\\nattribute vec2 a_textureCoordinates;\\n\\nuniform mat4 u_projectionMatrix;\\nuniform mat4 u_viewMatrix;\\n\\nuniform sampler2D u_positionsTexture;\\nuniform sampler2D u_velocitiesTexture;\\n\\nuniform float u_sphereRadius;\\n\\nvarying vec3 v_viewSpacePosition;\\nvarying vec3 v_viewSpaceNormal;\\nvarying float v_speed;\\n\\nvoid main () {\\n    vec3 spherePosition = texture2D(u_positionsTexture, a_textureCoordinates).rgb;\\n\\n    vec3 position = a_vertexPosition * u_sphereRadius + spherePosition;\\n\\n    v_viewSpacePosition = vec3(u_viewMatrix * vec4(position, 1.0));\\n    v_viewSpaceNormal = vec3(u_viewMatrix * vec4(a_vertexNormal, 0.0));\\n\\n    gl_Position = u_projectionMatrix * vec4(v_viewSpacePosition, 1.0);\\n\\n    vec3 velocity = texture2D(u_velocitiesTexture, a_textureCoordinates).rgb;\\n    v_speed = length(velocity);\\n}\\n","sphereao.frag":"precision highp float;\\n\\nuniform sampler2D u_renderingTexture;\\n\\nvarying vec3 v_viewSpaceSpherePosition;\\nvarying float v_sphereRadius;\\nvarying float v_extrudedSphereRadius;\\n\\nuniform vec2 u_resolution;\\nuniform float u_fov;\\n\\nconst float PI = 3.14159265;\\n\\nvoid main () {\\n    vec2 coordinates = gl_FragCoord.xy / u_resolution;\\n    vec4 data = texture2D(u_renderingTexture, coordinates);\\n\\n    //reconstruct position\\n\\n    vec3 viewSpaceNormal = vec3(data.x, data.y, sqrt(1.0 - data.x * data.x - data.y * data.y));\\n\\n    float tanHalfFOV = tan(u_fov / 2.0);\\n    float viewSpaceZ = data.a;\\n    vec3 viewRay = vec3(\\n        (coordinates.x * 2.0 - 1.0) * tanHalfFOV * u_resolution.x / u_resolution.y,\\n        (coordinates.y * 2.0 - 1.0) * tanHalfFOV,\\n        -1.0);\\n\\n    vec3 viewSpacePosition = viewRay * -viewSpaceZ;\\n\\n\\n    vec3 di = v_viewSpaceSpherePosition - viewSpacePosition;\\n    float l = length(di);\\n\\n    float nl = dot(viewSpaceNormal, di / l);\\n    float h = l / v_sphereRadius;\\n    float h2 = h * h;\\n    float k2 = 1.0 - h2 * nl * nl;\\n\\n    float result = max(0.0, nl) / h2;\\n\\n    if (k2 > 0.0 && l > v_sphereRadius) {\\n        result = nl * acos(-nl * sqrt((h2 - 1.0) / (1.0 - nl * nl))) - sqrt(k2 * (h2 - 1.0));\\n        result = result / h2 + atan(sqrt(k2 / (h2 - 1.0)));\\n        result /= PI;\\n\\n        // result = pow( clamp(0.5*(nl*h+1.0)/h2,0.0,1.0), 1.5 ); //cheap approximation\\n    }\\n\\n    gl_FragColor = vec4(result, 0.0, 0.0, 1.0);\\n\\n\\n}\\n","sphereao.vert":"precision highp float;\\n\\nattribute vec3 a_vertexPosition;\\n\\nattribute vec2 a_textureCoordinates;\\n\\nuniform mat4 u_projectionMatrix;\\nuniform mat4 u_viewMatrix;\\n\\nuniform sampler2D u_positionsTexture;\\nuniform sampler2D u_velocitiesTexture;\\n\\nuniform float u_sphereRadius;\\n\\nvarying vec3 v_viewSpaceSpherePosition;\\nvarying float v_sphereRadius;\\nvarying float v_extrudedSphereRadius;\\n\\nvoid main () {\\n    vec3 spherePosition = texture2D(u_positionsTexture, a_textureCoordinates).rgb;\\n    v_viewSpaceSpherePosition = vec3(u_viewMatrix * vec4(spherePosition, 1.0));\\n\\n    v_sphereRadius = u_sphereRadius;\\n    v_extrudedSphereRadius = v_sphereRadius * 1.8;\\n    \\n    vec3 position = a_vertexPosition * v_extrudedSphereRadius + spherePosition;\\n\\n    gl_Position = u_projectionMatrix * u_viewMatrix * vec4(position, 1.0);\\n}\\n","spheredepth.frag":"precision highp float;\\n\\nvoid main () {\\n    gl_FragColor = vec4(1.0);\\n}\\n","spheredepth.vert":"precision highp float;\\n\\nattribute vec3 a_vertexPosition;\\nattribute vec3 a_vertexNormal;\\n\\nattribute vec2 a_textureCoordinates;\\n\\nuniform mat4 u_projectionViewMatrix;\\n\\nuniform sampler2D u_positionsTexture;\\nuniform sampler2D u_velocitiesTexture;\\n\\nuniform float u_sphereRadius;\\n\\nvoid main () {\\n    vec3 spherePosition = texture2D(u_positionsTexture, a_textureCoordinates).rgb;\\n\\n    vec3 position = a_vertexPosition * u_sphereRadius + spherePosition;\\n\\n    gl_Position = u_projectionViewMatrix * vec4(position, 1.0);\\n}\\n","subtract.frag":"precision highp float;\\n\\nvarying vec2 v_coordinates;\\n\\nuniform vec3 u_gridResolution;\\n\\nuniform sampler2D u_pressureTexture;\\nuniform sampler2D u_velocityTexture;\\nuniform sampler2D u_markerTexture;\\n\\nvoid main () {\\n    vec3 cellIndex = floor(get3DFragCoord(u_gridResolution + 1.0));\\n\\n    float left = texture3DNearest(u_pressureTexture, (cellIndex + vec3(-1.0, 0.0, 0.0) + 0.5) / u_gridResolution, u_gridResolution).r;\\n    float right = texture3DNearest(u_pressureTexture, (cellIndex + 0.5) / u_gridResolution, u_gridResolution).r;\\n\\n    float bottom = texture3DNearest(u_pressureTexture, (cellIndex + vec3(0.0, -1.0, 0.0) + 0.5) / u_gridResolution, u_gridResolution).r;\\n    float top = texture3DNearest(u_pressureTexture, (cellIndex + 0.5) / u_gridResolution, u_gridResolution).r;\\n\\n    float back = texture3DNearest(u_pressureTexture, (cellIndex + vec3(0.0, 0.0, -1.0) + 0.5) / u_gridResolution, u_gridResolution).r;\\n    float front = texture3DNearest(u_pressureTexture, (cellIndex + 0.5) / u_gridResolution, u_gridResolution).r;\\n\\n\\n    //compute gradient of pressure\\n    vec3 gradient = vec3(right - left, top - bottom, front - back) / 1.0;\\n\\n    vec3 currentVelocity = texture2D(u_velocityTexture, v_coordinates).rgb;\\n\\n    vec3 newVelocity = currentVelocity - gradient;\\n\\n    gl_FragColor = vec4(newVelocity, 0.0);\\n}\\n","transfertogrid.frag":"//two modes:\\n//in one we accumulate (xWeight, yWeight, zWeight, centerWeight)\\n//in the other we accumulate (xWeight * velocity.x, yWeight * velocity.y, zWeight * velocity.z, 0)\\n\\n//needs a division as a second step\\n\\nvarying vec3 v_position; //already in the grid coordinate system\\nvarying vec3 v_velocity;\\n\\nuniform vec3 u_gridResolution;\\n\\nvarying float v_zIndex;\\n\\nuniform int u_accumulate; //when this is 0, we accumulate (xWeight, yWeight, 0, centerWeight), when 1 we accumulate (xWeight * velocity.x, yWeight * velocity.y, 0, 0)\\n\\nfloat h (float r) {\\n    if (r >= 0.0 && r <= 1.0) {\\n        return 1.0 - r;\\n    } else if (r >= -1.0 && r <= 0.0) {\\n        return 1.0 + r;\\n    } else {\\n        return 0.0;\\n    }\\n}\\n\\nfloat k (vec3 v) {\\n    return h(v.x) * h(v.y) * h(v.z);\\n}\\n\\nvoid main () {\\n    vec3 cellIndex = floor(get3DFragCoord(u_gridResolution + 1.0));\\n\\n    if (cellIndex.z == v_zIndex) { //make sure we\'re in the right slice to prevent bleeding\\n        //staggered grid position and therefor weight is different for x, y, z and scalar values\\n        vec3 xPosition = vec3(cellIndex.x, cellIndex.y + 0.5, cellIndex.z + 0.5);\\n        float xWeight = k(v_position - xPosition);\\n\\n        vec3 yPosition = vec3(cellIndex.x + 0.5, cellIndex.y, cellIndex.z + 0.5);\\n        float yWeight = k(v_position - yPosition);\\n\\n        vec3 zPosition = vec3(cellIndex.x + 0.5, cellIndex.y + 0.5, cellIndex.z);\\n        float zWeight = k(v_position - zPosition);\\n\\n        vec3 scalarPosition = vec3(cellIndex.x + 0.5, cellIndex.y + 0.5, cellIndex.z + 0.5);\\n        float scalarWeight = k(v_position - scalarPosition);\\n\\n        if (u_accumulate == 0) {\\n            gl_FragColor = vec4(xWeight, yWeight, zWeight, scalarWeight);\\n        } else if (u_accumulate == 1) {\\n            gl_FragColor = vec4(xWeight * v_velocity.x, yWeight * v_velocity.y, zWeight * v_velocity.z, 0.0);\\n        }\\n\\n    } else {\\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n    }\\n}\\n","transfertogrid.vert":"//transfers particle velocities to the grid by splatting them using additive blending\\n\\nprecision highp float;\\n\\nattribute vec2 a_textureCoordinates;\\n\\nuniform sampler2D u_positionTexture;\\nuniform sampler2D u_velocityTexture;\\n\\nuniform vec3 u_gridSize;\\nuniform vec3 u_gridResolution;\\n\\nvarying vec3 v_position;\\nvarying vec3 v_velocity;\\n\\nuniform float u_zOffset; //the offset for the z layer we\'re splatting into\\nvarying float v_zIndex; //the z layer we\'re splatting into\\n\\nvoid main () {\\n    gl_PointSize = 5.0; //TODO: i can probably compute this more accurately\\n\\n    vec3 position = texture2D(u_positionTexture, a_textureCoordinates).rgb;\\n    position = (position / u_gridSize) * u_gridResolution;\\n\\n    vec3 velocity = texture2D(u_velocityTexture, a_textureCoordinates).rgb;\\n    v_velocity = velocity;\\n    v_position = position;\\n\\n    vec3 cellIndex = vec3(floor(position.xyz));\\n    v_zIndex = cellIndex.z + u_zOffset; //offset into the right layer\\n\\n    vec2 textureCoordinates = vec2(\\n        v_zIndex * (u_gridResolution.x + 1.0) + cellIndex.x + 0.5,\\n        cellIndex.y + 0.5) / vec2((u_gridResolution.x + 1.0) * (u_gridResolution.z + 1.0), u_gridResolution.y + 1.0);\\n\\n    gl_Position = vec4(textureCoordinates * 2.0 - 1.0, 0.0, 1.0);\\n}\\n","transfertoparticles.frag":"//transfers velocities back to the particles \\n\\nvarying vec2 v_coordinates;\\n\\nuniform sampler2D u_particlePositionTexture;\\nuniform sampler2D u_particleVelocityTexture;\\n\\nuniform sampler2D u_gridVelocityTexture;\\nuniform sampler2D u_originalGridVelocityTexture; //the grid velocities before the update\\n\\nuniform vec3 u_gridResolution;\\nuniform vec3 u_gridSize;\\n\\nuniform float u_flipness; //0 is full PIC, 1 is full FLIP\\n\\nfloat sampleXVelocity (sampler2D texture, vec3 position) {\\n    vec3 cellIndex = vec3(position.x, position.y - 0.5, position.z - 0.5);\\n    return texture3D(texture, (cellIndex + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).x;\\n}\\n\\nfloat sampleYVelocity (sampler2D texture, vec3 position) {\\n    vec3 cellIndex = vec3(position.x - 0.5, position.y, position.z - 0.5);\\n    return texture3D(texture, (cellIndex + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).y;\\n}\\n\\nfloat sampleZVelocity (sampler2D texture, vec3 position) {\\n    vec3 cellIndex = vec3(position.x - 0.5, position.y - 0.5, position.z);\\n    return texture3D(texture, (cellIndex + 0.5) / (u_gridResolution + 1.0), u_gridResolution + 1.0).z;\\n}\\n\\nvec3 sampleVelocity (sampler2D texture, vec3 position) {\\n    return vec3(sampleXVelocity(texture, position), sampleYVelocity(texture, position), sampleZVelocity(texture, position));\\n}\\n\\nvoid main () {\\n    vec3 particlePosition = texture2D(u_particlePositionTexture, v_coordinates).rgb;\\n    particlePosition = (particlePosition / u_gridSize) * u_gridResolution;\\n\\n    vec3 particleVelocity = texture2D(u_particleVelocityTexture, v_coordinates).rgb;\\n\\n    vec3 currentVelocity = sampleVelocity(u_gridVelocityTexture, particlePosition);\\n    vec3 originalVelocity = sampleVelocity(u_originalGridVelocityTexture, particlePosition);\\n\\n    vec3 velocityChange = currentVelocity - originalVelocity;\\n\\n    vec3 flipVelocity = particleVelocity + velocityChange;\\n    vec3 picVelocity = currentVelocity;\\n\\n    gl_FragColor = vec4(mix(picVelocity, flipVelocity, u_flipness),  0.0);\\n}\\n"}')},function(e,t,i){"use strict";i.r(t),i.d(t,"default",(function(){return E}));var r=i(0);function n(e,t,i,r,n,o,a){try{var s=e[o](a),u=s.value}catch(e){return void i(e)}s.done?t(u):Promise.resolve(u).then(r,n)}function o(e){return function(){var t=this,i=arguments;return new Promise((function(r,o){var a=e.apply(t,i);function s(e){n(a,r,o,s,u,"next",e)}function u(e){n(a,r,o,s,u,"throw",e)}s(void 0)}))}}var a=function(){var e=["ACTIVE_ATTRIBUTES","ACTIVE_ATTRIBUTE_MAX_LENGTH","ACTIVE_TEXTURE","ACTIVE_UNIFORMS","ACTIVE_UNIFORM_MAX_LENGTH","ALIASED_LINE_WIDTH_RANGE","ALIASED_POINT_SIZE_RANGE","ALPHA","ALPHA_BITS","ALWAYS","ARRAY_BUFFER","ARRAY_BUFFER_BINDING","ATTACHED_SHADERS","BACK","BLEND","BLEND_COLOR","BLEND_DST_ALPHA","BLEND_DST_RGB","BLEND_EQUATION","BLEND_EQUATION_ALPHA","BLEND_EQUATION_RGB","BLEND_SRC_ALPHA","BLEND_SRC_RGB","BLUE_BITS","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","BROWSER_DEFAULT_WEBGL","BUFFER_SIZE","BUFFER_USAGE","BYTE","CCW","CLAMP_TO_EDGE","COLOR_ATTACHMENT0","COLOR_BUFFER_BIT","COLOR_CLEAR_VALUE","COLOR_WRITEMASK","COMPILE_STATUS","COMPRESSED_TEXTURE_FORMATS","CONSTANT_ALPHA","CONSTANT_COLOR","CONTEXT_LOST_WEBGL","CULL_FACE","CULL_FACE_MODE","CURRENT_PROGRAM","CURRENT_VERTEX_ATTRIB","CW","DECR","DECR_WRAP","DELETE_STATUS","DEPTH_ATTACHMENT","DEPTH_BITS","DEPTH_BUFFER_BIT","DEPTH_CLEAR_VALUE","DEPTH_COMPONENT","DEPTH_COMPONENT16","DEPTH_FUNC","DEPTH_RANGE","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","DEPTH_TEST","DEPTH_WRITEMASK","DITHER","DONT_CARE","DST_ALPHA","DST_COLOR","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER_BINDING","EQUAL","FASTEST","FLOAT","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","FRAGMENT_SHADER","FRAMEBUFFER","FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","FRAMEBUFFER_BINDING","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_UNSUPPORTED","FRONT","FRONT_AND_BACK","FRONT_FACE","FUNC_ADD","FUNC_REVERSE_SUBTRACT","FUNC_SUBTRACT","GENERATE_MIPMAP_HINT","GEQUAL","GREATER","GREEN_BITS","HIGH_FLOAT","HIGH_INT","INCR","INCR_WRAP","INFO_LOG_LENGTH","INT","INT_VEC2","INT_VEC3","INT_VEC4","INVALID_ENUM","INVALID_FRAMEBUFFER_OPERATION","INVALID_OPERATION","INVALID_VALUE","INVERT","KEEP","LEQUAL","LESS","LINEAR","LINEAR_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINES","LINE_LOOP","LINE_STRIP","LINE_WIDTH","LINK_STATUS","LOW_FLOAT","LOW_INT","LUMINANCE","LUMINANCE_ALPHA","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_RENDERBUFFER_SIZE","MAX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_VARYING_VECTORS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VIEWPORT_DIMS","MEDIUM_FLOAT","MEDIUM_INT","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","NEVER","NICEST","NONE","NOTEQUAL","NO_ERROR","NUM_COMPRESSED_TEXTURE_FORMATS","ONE","ONE_MINUS_CONSTANT_ALPHA","ONE_MINUS_CONSTANT_COLOR","ONE_MINUS_DST_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_SRC_COLOR","OUT_OF_MEMORY","PACK_ALIGNMENT","POINTS","POLYGON_OFFSET_FACTOR","POLYGON_OFFSET_FILL","POLYGON_OFFSET_UNITS","RED_BITS","RENDERBUFFER","RENDERBUFFER_ALPHA_SIZE","RENDERBUFFER_BINDING","RENDERBUFFER_BLUE_SIZE","RENDERBUFFER_DEPTH_SIZE","RENDERBUFFER_GREEN_SIZE","RENDERBUFFER_HEIGHT","RENDERBUFFER_INTERNAL_FORMAT","RENDERBUFFER_RED_SIZE","RENDERBUFFER_STENCIL_SIZE","RENDERBUFFER_WIDTH","RENDERER","REPEAT","REPLACE","RGB","RGB5_A1","RGB565","RGBA","RGBA4","SAMPLER_2D","SAMPLER_CUBE","SAMPLES","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_BUFFERS","SAMPLE_COVERAGE","SAMPLE_COVERAGE_INVERT","SAMPLE_COVERAGE_VALUE","SCISSOR_BOX","SCISSOR_TEST","SHADER_COMPILER","SHADER_SOURCE_LENGTH","SHADER_TYPE","SHADING_LANGUAGE_VERSION","SHORT","SRC_ALPHA","SRC_ALPHA_SATURATE","SRC_COLOR","STATIC_DRAW","STENCIL_ATTACHMENT","STENCIL_BACK_FAIL","STENCIL_BACK_FUNC","STENCIL_BACK_PASS_DEPTH_FAIL","STENCIL_BACK_PASS_DEPTH_PASS","STENCIL_BACK_REF","STENCIL_BACK_VALUE_MASK","STENCIL_BACK_WRITEMASK","STENCIL_BITS","STENCIL_BUFFER_BIT","STENCIL_CLEAR_VALUE","STENCIL_FAIL","STENCIL_FUNC","STENCIL_INDEX","STENCIL_INDEX8","STENCIL_PASS_DEPTH_FAIL","STENCIL_PASS_DEPTH_PASS","STENCIL_REF","STENCIL_TEST","STENCIL_VALUE_MASK","STENCIL_WRITEMASK","STREAM_DRAW","SUBPIXEL_BITS","TEXTURE","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","TEXTURE4","TEXTURE5","TEXTURE6","TEXTURE7","TEXTURE8","TEXTURE9","TEXTURE10","TEXTURE11","TEXTURE12","TEXTURE13","TEXTURE14","TEXTURE15","TEXTURE16","TEXTURE17","TEXTURE18","TEXTURE19","TEXTURE20","TEXTURE21","TEXTURE22","TEXTURE23","TEXTURE24","TEXTURE25","TEXTURE26","TEXTURE27","TEXTURE28","TEXTURE29","TEXTURE30","TEXTURE31","TEXTURE_2D","TEXTURE_BINDING_2D","TEXTURE_BINDING_CUBE_MAP","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TRIANGLES","TRIANGLE_FAN","TRIANGLE_STRIP","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNSIGNED_BYTE","UNSIGNED_INT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","VALIDATE_STATUS","VENDOR","VERSION","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","VERTEX_ATTRIB_ARRAY_ENABLED","VERTEX_ATTRIB_ARRAY_NORMALIZED","VERTEX_ATTRIB_ARRAY_POINTER","VERTEX_ATTRIB_ARRAY_SIZE","VERTEX_ATTRIB_ARRAY_STRIDE","VERTEX_ATTRIB_ARRAY_TYPE","VERTEX_SHADER","VIEWPORT","ZERO"];function t(t,i){for(var r=this.gl=t.getContext("webgl",i)||t.getContext("experimental-webgl",i),n=0;n<e.length;n+=1)this[e[n]]=r[e[n]];this.changedParameters={},this.parameters={framebuffer:{defaults:[null],setter:function(e){r.bindFramebuffer(r.FRAMEBUFFER,e)},usedInDraw:!0,usedInClear:!0,usedInRead:!0},program:{defaults:[{program:null}],setter:function(e){r.useProgram(e.program)},usedInDraw:!0},viewport:{defaults:[0,0,0,0],setter:r.viewport,usedInDraw:!0},indexBuffer:{defaults:[null],setter:function(e){r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e)},usedInDraw:!0},depthTest:{defaults:[!1],setter:function(e){e?r.enable(r.DEPTH_TEST):r.disable(r.DEPTH_TEST)},usedInDraw:!0},depthFunc:{defaults:[r.LESS],setter:r.depthFunc,usedInDraw:!0},cullFace:{defaults:[!1],setter:function(e){e?r.enable(r.CULL_FACE):r.disable(r.CULL_FACE)},usedInDraw:!0},frontFace:{defaults:[r.CCW],setter:r.frontFace},blend:{defaults:[!1],setter:function(e){e?r.enable(r.BLEND):r.disable(r.BLEND)},usedInDraw:!0},blendEquation:{defaults:[r.FUNC_ADD,r.FUNC_ADD],setter:r.blendEquationSeparate,usedInDraw:!0},blendFunc:{defaults:[r.ONE,r.ZERO,r.ONE,r.ZERO],setter:r.blendFuncSeparate,usedInDraw:!0},polygonOffsetFill:{defaults:[!1],setter:function(e){e?r.enable(r.POLYGON_OFFSET_FILL):r.disable(r.POLYGON_OFFSET_FILL)},usedInDraw:!0},polygonOffset:{defaults:[0,0],setter:r.polygonOffset,usedInDraw:!0},scissorTest:{defaults:[!1],setter:function(e){e?r.enable(r.SCISSOR_TEST):r.disable(r.SCISSOR_TEST)},usedInDraw:!0,usedInClear:!0},scissor:{defaults:[0,0,0,0],setter:r.scissor,usedInDraw:!0,usedInClear:!0},colorMask:{defaults:[!0,!0,!0,!0],setter:r.colorMask,usedInDraw:!0,usedInClear:!0},depthMask:{defaults:[!0],setter:r.depthMask,usedInDraw:!0,usedInClear:!0},clearColor:{defaults:[0,0,0,0],setter:r.clearColor,usedInClear:!0},clearDepth:{defaults:[1],setter:r.clearDepth,usedInClear:!0}};var o=r.getParameter(r.MAX_VERTEX_ATTRIBS);for(n=0;n<o;++n)this.parameters["attributeArray"+n.toString()]={defaults:[null,0,null,!1,0,0],setter:function(){var e=n;return function(t,i,n,o,a,s){null!==t&&(r.bindBuffer(r.ARRAY_BUFFER,t),r.vertexAttribPointer(e,i,n,o,a,s),r.enableVertexAttribArray(e))}}(),usedInDraw:!0};var a=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS);for(n=0;n<a;++n)this.parameters["texture"+n.toString()]={defaults:[r.TEXTURE_2D,null],setter:function(){var e=n;return function(t,i){r.activeTexture(r.TEXTURE0+e),r.bindTexture(t,i)}}(),usedInDraw:!0};this.uniformSetters={"1i":r.uniform1i,"2i":r.uniform2i,"3i":r.uniform3i,"4i":r.uniform4i,"1f":r.uniform1f,"2f":r.uniform2f,"3f":r.uniform3f,"4f":r.uniform4f,"1fv":r.uniform1fv,"2fv":r.uniform2fv,"3fv":r.uniform3fv,"4fv":r.uniform4fv,matrix2fv:r.uniformMatrix2fv,matrix3fv:r.uniformMatrix3fv,matrix4fv:r.uniformMatrix4fv},this.defaultTextureUnit=0}function i(){return(i=o(regeneratorRuntime.mark((function e(t,i){var n,o,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(0,n={},o=0;o<t.length;++o)a=t[o],n[a]=r[a];i(n);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function n(e,t,i){var r=e.createShader(t);return e.shaderSource(r,i),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS)||console.log(e.getShaderInfoLog(r)),r}function a(e,t,i,r){this.uniformLocations={},this.uniforms={};var o=e.gl,a=n(o,o.VERTEX_SHADER,t),s=n(o,o.FRAGMENT_SHADER,i),u=this.program=o.createProgram();if(o.attachShader(u,a),o.attachShader(u,s),void 0!==r)for(var l in r)o.bindAttribLocation(u,r[l],l);o.linkProgram(u),this.attributeLocations={};for(var c=o.getProgramParameter(u,o.ACTIVE_ATTRIBUTES),h=0;h<c;++h){l=o.getActiveAttrib(u,h).name;this.attributeLocations[l]=o.getAttribLocation(u,l)}var f=this.uniformLocations={},d=o.getProgramParameter(u,o.ACTIVE_UNIFORMS);for(h=0;h<d;h+=1){var _=o.getActiveUniform(u,h),m=o.getUniformLocation(u,_.name);f[_.name]=m}}function s(e){this.wgl=e,this.changedParameters={}}function u(e,t){for(var i=0;i<e.length;++i)if(e[i]!==t[i])return!1;return!0}function l(e){s.call(this,e),this.uniforms={}}function c(e){s.call(this,e)}function h(e){s.call(this,e)}return t.checkWebGLSupport=function(e,i){t.checkWebGLSupportWithExtensions([],e,(function(e,t){i()}))},t.checkWebGLSupportWithExtensions=function(e,t,i){var r=document.createElement("canvas"),n=null;try{n=r.getContext("webgl")||r.getContext("experimental-webgl")}catch(e){return void i(!1,[])}if(null!==n){for(var o=[],a=0;a<e.length;++a)null===n.getExtension(e[a])&&o.push(e[a]);o.length>0?i(!0,o):t()}else i(!1,[])},t.prototype.getSupportedExtensions=function(){return this.gl.getSupportedExtensions()},t.prototype.getExtension=function(e){var t=this.gl;if("ANGLE_instanced_arrays"===e){var i=t.getExtension("ANGLE_instanced_arrays");if(null!==i){this.instancedExt=i;for(var r=t.getParameter(t.MAX_VERTEX_ATTRIBS),n=0;n<r;++n)this.parameters["attributeDivisor"+n.toString()]={defaults:[0],setter:function(){var e=n;return function(t){i.vertexAttribDivisorANGLE(e,t)}}(),usedInDraw:!0};return l.prototype.vertexAttribPointer=function(e,t,i,r,n,o,a){return this.setParameter("attributeArray"+t.toString(),[e,i,r,n,o,a]),this.changedParameters.hasOwnProperty("attributeDivisor"+t.toString())&&this.setParameter("attributeDivisor"+t.toString(),[0]),this},l.prototype.vertexAttribDivisorANGLE=function(e,t){return this.setParameter("attributeDivisor"+e.toString(),[t]),this},this.drawArraysInstancedANGLE=function(e,t,i,r,n){this.resolveDrawState(e),this.instancedExt.drawArraysInstancedANGLE(t,i,r,n)},this.drawElementsInstancedANGLE=function(e,t,i,r,n,o){this.resolveDrawState(e),this.instancedExt.drawElementsInstancedANGLE(t,i,r,n,o)},{}}return null}return t.getExtension(e)},t.prototype.resolveState=function(e,t){this.gl;for(var i in this.changedParameters)this.changedParameters.hasOwnProperty(i)&&(e.changedParameters.hasOwnProperty(i)||this.parameters[i][t]&&(this.parameters[i].setter.apply(this.gl,this.parameters[i].defaults),delete this.changedParameters[i]));for(var i in e.changedParameters)e.changedParameters.hasOwnProperty(i)&&(this.changedParameters.hasOwnProperty(i)&&u(this.changedParameters[i],e.changedParameters[i])||(this.changedParameters[i]=e.changedParameters[i],this.parameters[i].setter.apply(this.gl,this.changedParameters[i])))},t.prototype.resolveDrawState=function(e){var t=this.gl;this.resolveState(e,"usedInDraw");var i=e.changedParameters.program[0];for(var r in e.uniforms)if(e.uniforms.hasOwnProperty(r)){var n=[i.uniformLocations[r]].concat(e.uniforms[r].value);this.uniformSetters[e.uniforms[r].type].apply(t,n)}},t.prototype.drawArrays=function(e,t,i,r){this.resolveDrawState(e),this.gl.drawArrays(t,i,r)},t.prototype.drawElements=function(e,t,i,r,n){this.resolveDrawState(e),this.gl.drawElements(t,i,r,n)},t.prototype.resolveClearState=function(e){this.resolveState(e,"usedInClear")},t.prototype.clear=function(e,t){this.resolveClearState(e),this.gl.clear(t)},t.prototype.resolveReadState=function(e){this.resolveState(e,"usedInRead")},t.prototype.readPixels=function(e,t,i,r,n,o,a,s){this.resolveReadState(e),this.gl.readPixels(t,i,r,n,o,a,s)},t.prototype.finish=function(){return this.gl.finish(),this},t.prototype.flush=function(){return this.gl.flush(),this},t.prototype.getError=function(){return this.gl.getError()},t.prototype.createFramebuffer=function(){return this.gl.createFramebuffer()},t.prototype.framebufferTexture2D=function(e,t,i,r,n,o){return this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,e),this.changedParameters.framebuffer=e,this.gl.framebufferTexture2D(t,i,r,n,o),this},t.prototype.framebufferRenderbuffer=function(e,t,i,r,n){this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,e),this.changedParameters.framebuffer=e,this.gl.framebufferRenderbuffer(t,i,r,n)},t.prototype.drawBuffers=function(e,t){this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,e),this.changedParameters.framebuffer=e,this.drawExt.drawBuffersWEBGL(t)},t.prototype.createTexture=function(){return this.gl.createTexture()},t.prototype.bindTextureForEditing=function(e,t){this.gl.activeTexture(this.gl.TEXTURE0+this.defaultTextureUnit),this.gl.bindTexture(e,t),this.changedParameters["texture"+this.defaultTextureUnit.toString()]=[e,t]},t.prototype.texImage2D=function(e,t){var i=Array.prototype.slice.call(arguments,2);return i.unshift(e),this.bindTextureForEditing(e,t),this.gl.texImage2D.apply(this.gl,i),this},t.prototype.texParameteri=function(e,t,i,r){return this.bindTextureForEditing(e,t),this.gl.texParameteri(e,i,r),this},t.prototype.texParameterf=function(e,t,i,r){return this.bindTextureForEditing(e,t),this.gl.texParameterf(e,i,r),this},t.prototype.pixelStorei=function(e,t,i,r){return this.bindTextureForEditing(e,t),this.gl.pixelStorei(i,r),this},t.prototype.setTextureFiltering=function(e,t,i,r,n,o){var a=this.gl;return this.bindTextureForEditing(e,t),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,i),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,r),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,n),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,o),this},t.prototype.generateMipmap=function(e,t){return this.bindTextureForEditing(e,t),this.gl.generateMipmap(e),this},t.prototype.buildTexture=function(e,t,i,r,n,o,a,s,u){var l=this.createTexture();return this.rebuildTexture(l,e,t,i,r,n,o,a,s,u),l},t.prototype.rebuildTexture=function(e,t,i,r,n,o,a,s,u,l){return this.texImage2D(this.TEXTURE_2D,e,0,t,r,n,0,t,i,o).setTextureFiltering(this.TEXTURE_2D,e,a,s,u,l),this},t.prototype.createRenderbuffer=function(){return this.gl.createRenderbuffer()},t.prototype.renderbufferStorage=function(e,t,i,r,n){return this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,e),this.gl.renderbufferStorage(t,i,r,n),this},t.prototype.createBuffer=function(){return this.gl.createBuffer()},t.prototype.bufferData=function(e,t,i,r){var n=this.gl;t===n.ARRAY_BUFFER||t===n.ELEMENT_ARRAY_BUFFER&&(this.changedParameters.indexBuffer=[e]),n.bindBuffer(t,e),n.bufferData(t,i,r)},t.prototype.bufferSubData=function(e,t,i,r){var n=this.gl;t===n.ARRAY_BUFFER||t===n.ELEMENT_ARRAY_BUFFER&&(this.changedParameters.indexBuffer=[e]),n.bindBuffer(t,e),n.bufferSubData(t,i,r)},t.prototype.createProgram=function(e,t,i){return new a(this,e,t,i)},t.prototype.createProgramFromFiles=function(e,t,r,n,o){var a=this,s=[];Array.isArray(e)?s=s.concat(e):s.push(e),Array.isArray(t)?s=s.concat(t):s.push(t),function(e,t){i.apply(this,arguments)}(s,(function(i){var o=[];if(Array.isArray(e))for(var s=0;s<e.length;++s)o.push(i[e[s]]);else o.push(i[e]);var u=[];if(Array.isArray(t))for(s=0;s<t.length;++s)u.push(i[t[s]]);else u.push(i[t]);var l=a.createProgram(o.join("\n"),u.join("\n"),r);n(l)}))},t.prototype.createProgramsFromFiles=function(e,t,i){var r=function(e){var t=0;for(var i in e)e.hasOwnProperty(i)&&(t+=1);return t}(e),n=0,o={};for(var a in e)if(e.hasOwnProperty(a)){var s=e[a],u=this;!function(){var e=a;u.createProgramFromFiles(s.vertexShader,s.fragmentShader,s.attributeLocations,(function(i){o[e]=i,++n===r&&t(o)}))}()}},t.prototype.createDrawState=function(){return new l(this)},t.prototype.createClearState=function(){return new c(this)},t.prototype.createReadState=function(){return new h(this)},t.prototype.deleteBuffer=function(e){this.gl.deleteBuffer(e)},t.prototype.deleteFramebuffer=function(e){this.gl.deleteFramebuffer(e)},t.prototype.deleteTexture=function(e){this.gl.deleteTexture(e)},a.prototype.getAttribLocation=function(e){return this.attributeLocations[e]},s.prototype.setParameter=function(e,t){u(t,this.wgl.parameters[e].defaults)?this.changedParameters.hasOwnProperty(e)&&delete this.changedParameters[e]:this.changedParameters[e]=t},s.prototype.clone=function(){var e=new this.constructor(this.wgl);for(var t in this.changedParameters)if(this.changedParameters.hasOwnProperty(t)){for(var i=this.changedParameters[t],r=[],n=0;n<i.length;++n)r.push(i[n]);e.changedParameters[t]=r}return e},l.prototype=Object.create(s.prototype),l.prototype.constructor=s,l.prototype.bindFramebuffer=function(e){return this.setParameter("framebuffer",[e]),this},l.prototype.viewport=function(e,t,i,r){return this.setParameter("viewport",[e,t,i,r]),this},l.prototype.enable=function(e){return e===this.wgl.DEPTH_TEST?this.setParameter("depthTest",[!0]):e===this.wgl.BLEND?this.setParameter("blend",[!0]):e===this.wgl.CULL_FACE?this.setParameter("cullFace",[!0]):e===this.wgl.POLYGON_OFFSET_FILL?this.setParameter("polygonOffsetFill",[!0]):e===this.wgl.SCISSOR_TEST&&this.setParameter("scissorTest",[!0]),this},l.prototype.disable=function(e){return e===this.wgl.DEPTH_TEST?this.setParameter("depthTest",[!1]):e===this.wgl.BLEND?this.setParameter("blend",[!1]):e===this.wgl.CULL_FACE?this.setParameter("cullFace",[!1]):e===this.wgl.POLYGON_OFFSET_FILL?this.setParameter("polygonOffsetFill",[!1]):e===this.wgl.SCISSOR_TEST&&this.setParameter("scissorTest",[!1]),this},l.prototype.vertexAttribPointer=function(e,t,i,r,n,o,a){return this.setParameter("attributeArray"+t.toString(),[e,i,r,n,o,a]),this.instancedExt&&this.changedParameters.hasOwnProperty("attributeDivisor"+t.toString())&&this.setParameter("attributeDivisor"+t.toString(),[0]),this},l.prototype.bindIndexBuffer=function(e){return this.setParameter("indexBuffer",[e]),this},l.prototype.depthFunc=function(e){return this.setParameter("depthFunc",[e]),this},l.prototype.frontFace=function(e){return this.setParameter("frontFace",[e]),this},l.prototype.blendEquation=function(e){return this.blendEquationSeparate(e,e),this},l.prototype.blendEquationSeparate=function(e,t){return this.setParameter("blendEquation",[e,t]),this},l.prototype.blendFunc=function(e,t){return this.blendFuncSeparate(e,t,e,t),this},l.prototype.blendFuncSeparate=function(e,t,i,r){return this.setParameter("blendFunc",[e,t,i,r]),this},l.prototype.scissor=function(e,t,i,r){return this.setParameter("scissor",[e,t,i,r]),this},l.prototype.useProgram=function(e){return this.setParameter("program",[e]),this},l.prototype.bindTexture=function(e,t,i){return this.setParameter("texture"+e.toString(),[t,i]),this},l.prototype.colorMask=function(e,t,i,r){return this.setParameter("colorMask",[e,t,i,r]),this},l.prototype.depthMask=function(e){return this.setParameter("depthMask",[e]),this},l.prototype.polygonOffset=function(e,t){return this.setParameter("polygonOffset",[e,t]),this},l.prototype.uniformTexture=function(e,t,i,r){return this.uniform1i(e,t),this.bindTexture(t,i,r),this},l.prototype.uniform1i=function(e,t){return this.uniforms[e]={type:"1i",value:[t]},this},l.prototype.uniform2i=function(e,t,i){return this.uniforms[e]={type:"2i",value:[t,i]},this},l.prototype.uniform3i=function(e,t,i,r){return this.uniforms[e]={type:"3i",value:[t,i,r]},this},l.prototype.uniform4i=function(e,t,i,r,n){return this.uniforms[e]={type:"4i",value:[t,i,r,n]},this},l.prototype.uniform1f=function(e,t){return this.uniforms[e]={type:"1f",value:t},this},l.prototype.uniform2f=function(e,t,i){return this.uniforms[e]={type:"2f",value:[t,i]},this},l.prototype.uniform3f=function(e,t,i,r){return this.uniforms[e]={type:"3f",value:[t,i,r]},this},l.prototype.uniform4f=function(e,t,i,r,n){return this.uniforms[e]={type:"4f",value:[t,i,r,n]},this},l.prototype.uniform1fv=function(e,t){return this.uniforms[e]={type:"1fv",value:[t]},this},l.prototype.uniform2fv=function(e,t){return this.uniforms[e]={type:"2fv",value:[t]},this},l.prototype.uniform3fv=function(e,t){return this.uniforms[e]={type:"3fv",value:[t]},this},l.prototype.uniform4fv=function(e,t){return this.uniforms[e]={type:"4fv",value:[t]},this},l.prototype.uniformMatrix2fv=function(e,t,i){return this.uniforms[e]={type:"matrix2fv",value:[t,i]},this},l.prototype.uniformMatrix3fv=function(e,t,i){return this.uniforms[e]={type:"matrix3fv",value:[t,i]},this},l.prototype.uniformMatrix4fv=function(e,t,i){return this.uniforms[e]={type:"matrix4fv",value:[t,i]},this},c.prototype=Object.create(s.prototype),c.prototype.constructor=c,c.prototype.bindFramebuffer=function(e){return this.setParameter("framebuffer",[e]),this},c.prototype.clearColor=function(e,t,i,r){return this.setParameter("clearColor",[e,t,i,r]),this},c.prototype.clearDepth=function(e){return this.setParameter("clearDepth",[e]),this},c.prototype.colorMask=function(e,t,i,r){return this.setParameter("colorMask",[e,t,i,r]),this},c.prototype.depthMask=function(e){return this.setParameter("depthMask",[e]),this},h.prototype=Object.create(s.prototype),h.prototype.constructor=h,h.prototype.bindFramebuffer=function(e){return this.setParameter("framebuffer",[e]),this},t}(),s={clamp:function(e,t,i){return Math.max(t,Math.min(i,e))},getMousePosition:function(e,t){var i=t.getBoundingClientRect();return{x:e.clientX-i.left,y:e.clientY-i.top}},addVectors:function(e,t,i){return e[0]=t[0]+i[0],e[1]=t[1]+i[1],e[2]=t[2]+i[2],e},subtractVectors:function(e,t,i){return e[0]=t[0]-i[0],e[1]=t[1]-i[1],e[2]=t[2]-i[2],e},magnitudeOfVector:function(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2])},dotVectors:function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]},multiplyVectorByScalar:function(e,t,i){return e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e},normalizeVector:function(e,t){var i=1/s.magnitudeOfVector(t);return e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e},makePerspectiveMatrix:function(e,t,i,r,n){var o=1/Math.tan(t/2),a=1/(r-n);return e[0]=o/i,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(n+r)*a,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*n*r*a,e[15]=0,e},makeIdentityMatrix:function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},premultiplyMatrix:function(e,t,i){var r=i[0],n=i[4],o=i[8],a=i[12],s=i[1],u=i[5],l=i[9],c=i[13],h=i[2],f=i[6],d=i[10],_=i[14],m=i[3],g=i[7],p=i[11],T=i[15],x=t[0],v=t[1],E=t[2],R=t[3];return e[0]=r*x+n*v+o*E+a*R,e[1]=s*x+u*v+l*E+c*R,e[2]=h*x+f*v+d*E+_*R,e[3]=m*x+g*v+p*E+T*R,x=t[4],v=t[5],E=t[6],R=t[7],e[4]=r*x+n*v+o*E+a*R,e[5]=s*x+u*v+l*E+c*R,e[6]=h*x+f*v+d*E+_*R,e[7]=m*x+g*v+p*E+T*R,x=t[8],v=t[9],E=t[10],R=t[11],e[8]=r*x+n*v+o*E+a*R,e[9]=s*x+u*v+l*E+c*R,e[10]=h*x+f*v+d*E+_*R,e[11]=m*x+g*v+p*E+T*R,x=t[12],v=t[13],E=t[14],R=t[15],e[12]=r*x+n*v+o*E+a*R,e[13]=s*x+u*v+l*E+c*R,e[14]=h*x+f*v+d*E+_*R,e[15]=m*x+g*v+p*E+T*R,e},makeXRotationMatrix:function(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=Math.cos(t),e[6]=Math.sin(t),e[7]=0,e[8]=0,e[9]=-Math.sin(t),e[10]=Math.cos(t),e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},makeYRotationMatrix:function(e,t){return e[0]=Math.cos(t),e[1]=0,e[2]=-Math.sin(t),e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=Math.sin(t),e[9]=0,e[10]=Math.cos(t),e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},transformDirectionByMatrix:function(e,t,i){var r=t[0],n=t[1],o=t[2];return e[0]=i[0]*r+i[4]*n+i[8]*o,e[1]=i[1]*r+i[5]*n+i[9]*o,e[2]=i[2]*r+i[6]*n+i[10]*o,e[3]=i[3]*r+i[7]*n+i[11]*o,e},invertMatrix:function(e,t){var i=t[0],r=t[4],n=t[8],o=t[12],a=t[1],s=t[5],u=t[9],l=t[13],c=t[2],h=t[6],f=t[10],d=t[14],_=t[3],m=t[7],g=t[11],p=t[15],T=f*p,x=d*g,v=h*p,E=d*m,R=h*g,A=f*m,y=c*p,b=d*_,S=c*g,P=f*_,D=c*m,F=h*_,I=n*l,w=o*u,M=r*l,N=o*s,C=r*u,L=n*s,O=i*l,B=o*a,U=i*u,V=n*a,X=i*s,G=r*a,H=T*s+E*u+R*l-(x*s+v*u+A*l),W=x*a+y*u+P*l-(T*a+b*u+S*l),z=v*a+b*s+D*l-(E*a+y*s+F*l),k=A*a+S*s+F*u-(R*a+P*s+D*u),Y=1/(i*H+r*W+n*z+o*k);return e[0]=Y*H,e[1]=Y*W,e[2]=Y*z,e[3]=Y*k,e[4]=Y*(x*r+v*n+A*o-(T*r+E*n+R*o)),e[5]=Y*(T*i+b*n+S*o-(x*i+y*n+P*o)),e[6]=Y*(E*i+y*r+F*o-(v*i+b*r+D*o)),e[7]=Y*(R*i+P*r+D*n-(A*i+S*r+F*n)),e[8]=Y*(I*m+N*g+C*p-(w*m+M*g+L*p)),e[9]=Y*(w*_+O*g+V*p-(I*_+B*g+U*p)),e[10]=Y*(M*_+B*m+X*p-(N*_+O*m+G*p)),e[11]=Y*(L*_+U*m+G*g-(C*_+V*m+X*g)),e[12]=Y*(M*f+L*d+w*h-(C*d+I*h+N*f)),e[13]=Y*(U*d+I*c+B*f-(O*f+V*d+w*c)),e[14]=Y*(O*h+G*d+N*c-(X*d+M*c+B*h)),e[15]=Y*(X*f+C*c+V*h-(U*h+G*f+L*c)),e},makeLookAtMatrix:function(e,t,i,r){var n=t[0]-i[0],o=t[1]-i[1],a=t[2]-i[2],s=Math.sqrt(n*n+o*o+a*a);n/=s,o/=s,a/=s;var u=r[2]*o-r[1]*a,l=r[0]*a-r[2]*n,c=r[1]*n-r[0]*o,h=Math.sqrt(u*u+l*l+c*c),f=o*(c/=h)-a*(l/=h),d=a*(u/=h)-n*c,_=n*l-o*u,m=Math.sqrt(f*f+d*d+_*_);f/=m,d/=m,_/=m,e[0]=u,e[1]=f,e[2]=n,e[3]=0,e[4]=l,e[5]=d,e[6]=o,e[7]=0,e[8]=c,e[9]=_,e[10]=a,e[11]=0,e[12]=-(u*t[0]+l*t[1]+c*t[2]),e[13]=-(f*t[0]+d*t[1]+_*t[2]),e[14]=-(n*t[0]+o*t[1]+a*t[2]),e[15]=1},makeOrthographicMatrix:function(e,t,i,r,n,o,a){return e[0]=2/(i-t),e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=2/(n-r),e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=-2/(a-o),e[11]=0,e[12]=-(i+t)/(i-t),e[13]=-(n+r)/(n-r),e[14]=-(a+o)/(a-o),e[15]=1,e}},u=function(){function e(e,t,i){this.element=e,this.distance=i.distance,this.orbitPoint=t,this.azimuth=i.azimuth,this.elevation=i.elevation,this.minElevation=-Math.PI/4,this.maxElevation=Math.PI/4,this.currentMouseX=0,this.currentMouseY=0,this.lastMouseX=0,this.lastMouseY=0,this.viewMatrix=new Float32Array(16),this.recomputeViewMatrix()}return e.prototype.recomputeViewMatrix=function(){var e=new Float32Array(16),t=new Float32Array(16),i=s.makeIdentityMatrix(new Float32Array(16)),r=s.makeIdentityMatrix(new Float32Array(16));s.makeIdentityMatrix(this.viewMatrix),s.makeXRotationMatrix(e,this.elevation),s.makeYRotationMatrix(t,this.azimuth),i[14]=-this.distance,r[12]=-this.orbitPoint[0],r[13]=-this.orbitPoint[1],r[14]=-this.orbitPoint[2],s.premultiplyMatrix(this.viewMatrix,this.viewMatrix,r),s.premultiplyMatrix(this.viewMatrix,this.viewMatrix,t),s.premultiplyMatrix(this.viewMatrix,this.viewMatrix,e),s.premultiplyMatrix(this.viewMatrix,this.viewMatrix,i)},e.prototype.getPosition=function(){return[this.distance*Math.sin(Math.PI/2-this.elevation)*Math.sin(-this.azimuth)+this.orbitPoint[0],this.distance*Math.cos(Math.PI/2-this.elevation)+this.orbitPoint[1],this.distance*Math.sin(Math.PI/2-this.elevation)*Math.cos(-this.azimuth)+this.orbitPoint[2]]},e.prototype.getViewMatrix=function(){return this.viewMatrix},e.prototype.setBounds=function(e,t){this.minElevation=e,this.maxElevation=t,this.elevation>this.maxElevation&&(this.elevation=this.maxElevation),this.elevation<this.minElevation&&(this.elevation=this.minElevation),this.recomputeViewMatrix()},e}(),l=function(){function e(e,t){this.min=[e[0],e[1],e[2]],this.max=[t[0],t[1],t[2]]}e.prototype.computeVolume=function(){for(var e=1,t=0;t<3;++t)e*=this.max[t]-this.min[t];return e},e.prototype.computeSurfaceArea=function(){var e=this.max[0]-this.min[0],t=this.max[1]-this.min[1],i=this.max[2]-this.min[2];return 2*(e*t+e*i+t*i)},e.prototype.clone=function(){return new e([this.min[0],this.min[1],this.min[2]],[this.max[0],this.max[1],this.max[2]])},e.prototype.randomPoint=function(){for(var e=[],t=0;t<3;++t)e[t]=this.min[t]+Math.random()*(this.max[t]-this.min[t]);return e};var t={RESIZING:0,TRANSLATING:1,DRAWING:2,EXTRUDING:3};function i(e,t){return e.min[0]<t.max[0]&&e.max[0]>t.min[0]&&e.min[1]<t.max[1]&&e.max[1]>t.min[1]&&e.min[2]<t.max[2]&&e.max[2]>t.min[2]}function r(e,t,i){for(var r=-1/0,n=1/0,o=0,a=0;a<3;++a){var s=(i.min[a]-e[a])/t[a],u=(i.max[a]-e[a])/t[a];if(s>u){var l=s;s=u,u=l}if(u<r||s>n)return null;s>r&&(r=s,o=a),u<n&&(n=u)}if(r>n)return null;var c=[];for(a=0;a<3;++a)c[a]=e[a]+t[a]*r;return{aabb:i,t:r,axis:o,side:t[o]>0?-1:1,point:c}}function n(e,t,i,r){var n=s.subtractVectors([],e,i),o=s.dotVectors(t,t),a=s.dotVectors(t,r),u=s.dotVectors(r,r),l=s.dotVectors(t,n),c=s.dotVectors(r,n),h=(a*c-u*l)/(o*u-a*a),f=(o*c-a*l)/(o*u-a*a);return[s.addVectors([],e,s.multiplyVectorByScalar([],t,h)),s.addVectors([],i,s.multiplyVectorByScalar([],r,f))]}function o(e,t,i,r,n,o,a){this.canvas=e,this.wgl=t,this.gridWidth=n[0],this.gridHeight=n[1],this.gridDepth=n[2],this.gridDimensions=[this.gridWidth,this.gridHeight,this.gridDepth],this.projectionMatrix=i,this.camera=r,this.onChange=a,this.cubeVertexBuffer=t.createBuffer(),t.bufferData(this.cubeVertexBuffer,t.ARRAY_BUFFER,new Float32Array([0,0,1,1,0,1,1,1,1,0,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,1,0]),t.STATIC_DRAW),this.cubeIndexBuffer=t.createBuffer(),t.bufferData(this.cubeIndexBuffer,t.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),t.STATIC_DRAW),this.cubeWireframeVertexBuffer=t.createBuffer(),t.bufferData(this.cubeWireframeVertexBuffer,t.ARRAY_BUFFER,new Float32Array([0,0,0,1,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,0,1,1]),t.STATIC_DRAW),this.cubeWireframeIndexBuffer=t.createBuffer(),t.bufferData(this.cubeWireframeIndexBuffer,t.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),t.STATIC_DRAW),this.gridVertexBuffers=[];for(var s=0;s<3;++s){this.gridVertexBuffers[s]=t.createBuffer();var u,l=[];0===s?u=[[0,0,0],[0,this.gridHeight,0],[0,this.gridHeight,this.gridDepth],[0,0,this.gridDepth]]:1===s?u=[[0,0,0],[this.gridWidth,0,0],[this.gridWidth,0,this.gridDepth],[0,0,this.gridDepth]]:2===s&&(u=[[0,0,0],[this.gridWidth,0,0],[this.gridWidth,this.gridHeight,0],[0,this.gridHeight,0]]);for(var c=0;c<4;++c)l.push(u[c][0]),l.push(u[c][1]),l.push(u[c][2]),l.push(u[(c+1)%4][0]),l.push(u[(c+1)%4][1]),l.push(u[(c+1)%4][2]);t.bufferData(this.gridVertexBuffers[s],t.ARRAY_BUFFER,new Float32Array(l),t.STATIC_DRAW)}this.pointVertexBuffer=t.createBuffer(),t.bufferData(this.pointVertexBuffer,t.ARRAY_BUFFER,new Float32Array([-1,-1,0,-1,1,0,1,-1,0,1,1,0]),t.STATIC_DRAW),this.quadVertexBuffer=t.createBuffer(),t.bufferData(this.quadVertexBuffer,t.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,-1,1,1]),t.STATIC_DRAW),this.boxes=[],this.mouseX=999,this.mouseY=999,this.keyPressed=[];for(c=0;c<256;++c)this.keyPressed[c]=!1;this.interactionState=null,t.createProgramsFromFiles({backgroundProgram:{vertexShader:"background.vert",fragmentShader:"background.frag"},boxProgram:{vertexShader:"box.vert",fragmentShader:"box.frag"},boxWireframeProgram:{vertexShader:"boxwireframe.vert",fragmentShader:"boxwireframe.frag"},gridProgram:{vertexShader:"grid.vert",fragmentShader:"grid.frag"},pointProgram:{vertexShader:"point.vert",fragmentShader:"point.frag"}},function(e){for(var t in e)this[t]=e[t];o()}.bind(this))}function a(e,t){return Math.round(e/t)*t}function u(e,t){for(var i=0;i<e.length;++i)e[i]=a(e[i],t);return e}return o.prototype.onKeyDown=function(e){this.keyPressed[e.keyCode]=!0},o.prototype.onKeyUp=function(e){this.keyPressed[e.keyCode]=!1},o.prototype.onMouseMove=function(r){r.preventDefault();var o=s.getMousePosition(r,this.canvas),l=o.x/this.canvas.width,c=o.y/this.canvas.height;if(this.mouseX=2*l-1,this.mouseY=2*(1-c)-1,null!==this.interactionState)if(this.onChange(),this.interactionState.mode===t.RESIZING||this.interactionState.mode===t.EXTRUDING){var h=this.getMouseRay(),f=this.interactionState.point;(p=[0,0,0])[this.interactionState.axis]=1,T=a(T=n(f,p,h.origin,h.direction)[0][this.interactionState.axis],1);var d=this.interactionState.box,_=this.interactionState.side,m=this.interactionState.axis;-1===_?d.min[m]=Math.max(Math.min(T,d.max[m]),0):1===_&&(d.max[m]=Math.min(Math.max(T,d.min[m]),this.gridDimensions[m]));for(var g=0;g<this.boxes.length;++g){d!==(P=this.boxes[g])&&i(d,P)&&(-1===_?d.min[m]=P.max[m]:1===_&&(d.max[m]=P.min[m]))}}else if(this.interactionState.mode===t.TRANSLATING){var p,T;h=this.getMouseRay(),f=this.interactionState.point;(p=[0,0,0])[this.interactionState.axis]=1,T=a(T=n(f,p,h.origin,h.direction)[0][this.interactionState.axis],1);d=this.interactionState.box,_=this.interactionState.side,m=this.interactionState.axis;var x=this.interactionState.startMax-this.interactionState.startMin;-1===_?(d.min[m]=T,d.max[m]=T+x):1===_&&(d.max[m]=T,d.min[m]=T-x),d.min[m]<0&&(d.min[m]=0,d.max[m]=x),d.max[m]>this.gridDimensions[m]&&(d.max[m]=this.gridDimensions[m],d.min[m]=this.gridDimensions[m]-x);var v=0;-1===_?v=T<this.interactionState.startMin?-1:1:1===_&&(v=T<this.interactionState.startMax?-1:1),(S=d.clone()).min[m]=this.interactionState.startMin,S.max[m]=this.interactionState.startMax,1===v?S.max[m]=d.max[m]:-1===v&&(S.min[m]=d.min[m]);for(g=0;g<this.boxes.length;++g){d!==(P=this.boxes[g])&&i(S,P)&&(-1===v?(d.min[m]=P.max[m],d.max[m]=P.max[m]+x):1===v&&(d.max[m]=P.min[m],d.min[m]=P.min[m]-x))}}else if(this.interactionState.mode===t.DRAWING){h=this.getMouseRay(),m=this.interactionState.axis,_=this.interactionState.side;var E=this.interactionState.point,R=((-1===_?0:this.gridDimensions[m])-h.origin[m])/h.direction[m];if(R>0){var A=s.addVectors([],h.origin,s.multiplyVectorByScalar([],h.direction,R));u(A,1);for(g=0;g<3;++g)A[g]=s.clamp(A[g],0,this.gridDimensions[g]),A[g]=s.clamp(A[g],0,this.gridDimensions[g]);var y=[Math.min(E[0],A[0]),Math.min(E[1],A[1]),Math.min(E[2],A[2])],b=[Math.max(E[0],A[0]),Math.max(E[1],A[1]),Math.max(E[2],A[2])],S=(d=this.interactionState.box,new e(y,b));-1===this.interactionState.side?S.max[this.interactionState.axis]=.1:S.min[this.interactionState.axis]=this.gridDimensions[this.interactionState.axis]-.1;for(g=0;g<this.boxes.length;++g){var P;if(d!==(P=this.boxes[g])&&i(S,P)){var D=99999999,F=-1;for(m=0;m<3;++m)if(m!==this.interactionState.axis){var I=Math.min(b[m],P.max[m])-Math.max(y[m],P.min[m]);I>0&&I<D&&(E[m]<P.min[m]||E[m]>P.max[m])&&(D=I,F=m)}A[F]>E[F]?b[F]=P.min[F]:y[F]=P.max[F]}}this.interactionState.box.min=y,this.interactionState.box.max=b}}this.camera.onMouseMove(r)},o.prototype.getBoxIntersection=function(e,t){for(var i={aabb:null,t:1/0},n=0;n<this.boxes.length;++n){var o=r(e,t,this.boxes[n]);null!==o&&o.t<i.t&&(i=o)}return null===i.aabb?null:i},o.prototype.getBoundingPlaneIntersection=function(e,t){for(var i=0;i<3;++i)for(var r=-1;r<=1;r+=2){if(-1===r?t[i]<0:t[i]>0){var n=((-1===r?0:this.gridDimensions[i])-e[i])/t[i];if(n>0){var o=s.addVectors([],e,s.multiplyVectorByScalar([],t,n));if(o[0]>=0&&o[0]<=this.gridDimensions[0]&&o[1]>=0&&o[1]<=this.gridDimensions[1]&&o[2]>=0&&o[2]<=this.gridDimensions[2])return{axis:i,side:r,point:o}}}}return null},o.prototype.onMouseDown=function(i){if(i.preventDefault(),this.onMouseMove(i),!this.keyPressed[32]){if(null!==this.interactionState&&this.interactionState.mode===t.EXTRUDING)return 0===this.interactionState.box.computeVolume()&&this.boxes.splice(this.boxes.indexOf(this.interactionState.box),1),this.interactionState=null,void this.onChange();var r=this.getMouseRay(),n=this.getBoxIntersection(r.origin,r.direction);if(null!==n){var o=n;this.keyPressed[16]?this.interactionState={mode:t.TRANSLATING,box:o.aabb,axis:o.axis,side:o.side,point:o.point,startMax:o.aabb.max[o.axis],startMin:o.aabb.min[o.axis]}:this.interactionState={mode:t.RESIZING,box:o.aabb,axis:o.axis,side:o.side,point:o.point}}if(null===n){r=this.getMouseRay();var s=this.getBoundingPlaneIntersection(r.origin,r.direction);if(null!==s){var u=s.point;u[0]=a(u[0],1),u[1]=a(u[1],1),u[2]=a(u[2],1);var l=new e(u,u);this.boxes.push(l),this.interactionState={mode:t.DRAWING,box:l,axis:s.axis,side:s.side,point:s.point}}this.onChange()}}null===this.interactionState&&this.camera.onMouseDown(i)},o.prototype.onMouseUp=function(e){if(e.preventDefault(),null!==this.interactionState){if(this.interactionState.mode===t.RESIZING)0===this.interactionState.box.computeVolume()&&this.boxes.splice(this.boxes.indexOf(this.interactionState.box),1),this.interactionState=null;else if(this.interactionState.mode===t.TRANSLATING)this.interactionState=null;else if(this.interactionState.mode===t.DRAWING)if(this.interactionState.box.computeSurfaceArea()>0){var i=this.getMouseRay(),r=this.interactionState.axis,n=this.interactionState.side,o=(this.interactionState.point,((-1===n?0:this.gridDimensions[r])-i.origin[r])/i.direction[r]),a=s.addVectors([],i.origin,s.multiplyVectorByScalar([],i.direction,o));u(a,1);for(var l=0;l<3;++l)a[l]=s.clamp(a[l],0,this.gridDimensions[l]),a[l]=s.clamp(a[l],this.interactionState.box.min[l],this.interactionState.box.max[l]);this.interactionState={mode:t.EXTRUDING,box:this.interactionState.box,axis:this.interactionState.axis,side:-1*this.interactionState.side,point:a}}else this.boxes.splice(this.boxes.indexOf(this.interactionState.box),1),this.interactionState=null;this.onChange()}null===this.interactionState&&this.camera.onMouseUp(e)},o.prototype.getMouseRay=function(){var e=2*Math.atan(1/this.projectionMatrix[5]),t=[this.mouseX*Math.tan(e/2)*(this.canvas.width/this.canvas.height),this.mouseY*Math.tan(e/2),-1],i=s.invertMatrix([],this.camera.getViewMatrix()),r=s.transformDirectionByMatrix([],t,i);return s.normalizeVector(r,r),{origin:this.camera.getPosition(),direction:r}},o.prototype.draw=function(){var e=this.wgl;e.clear(e.createClearState().bindFramebuffer(null).clearColor(.9,.9,.9,1),e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT);var i=e.createDrawState().bindFramebuffer(null).viewport(0,0,this.canvas.width,this.canvas.height).useProgram(this.backgroundProgram).vertexAttribPointer(this.quadVertexBuffer,this.backgroundProgram.getAttribLocation("a_position"),2,e.FLOAT,e.FALSE,0,0);e.drawArrays(i,e.TRIANGLE_STRIP,0,4);for(var r=0;r<3;++r)for(var n=0;n<=1;++n){var o=this.camera.getPosition(),a=[this.gridWidth/2,this.gridHeight/2,this.gridDepth/2];a[r]=0===n?0:this.gridDimensions[r];var l=s.subtractVectors([],a,o),c=e.createDrawState().bindFramebuffer(null).viewport(0,0,this.canvas.width,this.canvas.height).useProgram(this.gridProgram).vertexAttribPointer(this.gridVertexBuffers[r],this.gridProgram.getAttribLocation("a_vertexPosition"),3,e.FLOAT,e.FALSE,0,0).uniformMatrix4fv("u_projectionMatrix",!1,this.projectionMatrix).uniformMatrix4fv("u_viewMatrix",!1,this.camera.getViewMatrix()),h=[0,0,0];h[r]=n*this.gridDimensions[r],c.uniform3f("u_translation",h[0],h[1],h[2]),(0===n&&l[r]<=0||1===n&&l[r]>=0)&&e.drawArrays(c,e.LINES,0,8)}var f=e.createDrawState().bindFramebuffer(null).viewport(0,0,this.canvas.width,this.canvas.height).enable(e.DEPTH_TEST).enable(e.CULL_FACE).useProgram(this.boxProgram).vertexAttribPointer(this.cubeVertexBuffer,this.boxProgram.getAttribLocation("a_cubeVertexPosition"),3,e.FLOAT,e.FALSE,0,0).bindIndexBuffer(this.cubeIndexBuffer).uniformMatrix4fv("u_projectionMatrix",!1,this.projectionMatrix).uniformMatrix4fv("u_viewMatrix",!1,this.camera.getViewMatrix()).enable(e.POLYGON_OFFSET_FILL).polygonOffset(1,1),d=null,_=null,m=null;if(null!==this.interactionState)this.interactionState.mode!==t.RESIZING&&this.interactionState.mode!==t.EXTRUDING||(d=this.interactionState.box,(_=[1.5,1.5,1.5])[this.interactionState.axis]=this.interactionState.side,m=[.75,.75,.75]);else if(!this.keyPressed[32]&&!this.camera.isMouseDown()){var g=this.getMouseRay(),p=this.getBoxIntersection(g.origin,g.direction);if(null!==p&&(d=p.aabb,(_=[1.5,1.5,1.5])[p.axis]=p.side,m=[.9,.9,.9]),null===p&&!this.keyPressed[32]){var T=this.getBoundingPlaneIntersection(g.origin,g.direction);if(null!==T){var x=T.point;u(x,1);var v=[new Float32Array([0,0,1,0,1,0,1,0,0]),new Float32Array([1,0,0,0,0,1,0,1,0]),new Float32Array([1,0,0,0,1,0,0,0,1])][T.axis],E=e.createDrawState().bindFramebuffer(null).viewport(0,0,this.canvas.width,this.canvas.height).enable(e.DEPTH_TEST).useProgram(this.pointProgram).vertexAttribPointer(this.pointVertexBuffer,this.pointProgram.getAttribLocation("a_position"),3,e.FLOAT,e.FALSE,0,0).uniformMatrix4fv("u_projectionMatrix",!1,this.projectionMatrix).uniformMatrix4fv("u_viewMatrix",!1,this.camera.getViewMatrix()).uniform3f("u_position",x[0],x[1],x[2]).uniformMatrix3fv("u_rotation",!1,v);e.drawArrays(E,e.TRIANGLE_STRIP,0,4)}}}for(var R=0;R<this.boxes.length;++R){var A=this.boxes[R];f.uniform3f("u_translation",A.min[0],A.min[1],A.min[2]).uniform3f("u_scale",A.max[0]-A.min[0],A.max[1]-A.min[1],A.max[2]-A.min[2]),A===d?(f.uniform3f("u_highlightSide",_[0],_[1],_[2]),f.uniform3f("u_highlightColor",m[0],m[1],m[2])):f.uniform3f("u_highlightSide",1.5,1.5,1.5),e.drawElements(f,e.TRIANGLES,36,e.UNSIGNED_SHORT)}var y=e.createDrawState().bindFramebuffer(null).viewport(0,0,this.canvas.width,this.canvas.height).enable(e.DEPTH_TEST).useProgram(this.boxWireframeProgram).vertexAttribPointer(this.cubeWireframeVertexBuffer,this.boxWireframeProgram.getAttribLocation("a_cubeVertexPosition"),3,e.FLOAT,e.FALSE,0,0).bindIndexBuffer(this.cubeWireframeIndexBuffer).uniformMatrix4fv("u_projectionMatrix",!1,this.projectionMatrix).uniformMatrix4fv("u_viewMatrix",!1,this.camera.getViewMatrix());for(R=0;R<this.boxes.length;++R){A=this.boxes[R];y.uniform3f("u_translation",A.min[0],A.min[1],A.min[2]).uniform3f("u_scale",A.max[0]-A.min[0],A.max[1]-A.min[1],A.max[2]-A.min[2]),e.drawElements(y,e.LINES,24,e.UNSIGNED_SHORT)}},{BoxEditor:o,AABB:e,InteractionMode:t}}(),c=function(){function e(e,t,i,r,n){function o(e){e=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,i,r){return t+t+i+i+r+r}));var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?{r:parseInt(t[1],16)/255,g:parseInt(t[2],16)/255,b:parseInt(t[3],16)/255}:null}this.color1=o(n.color1),this.color2=n.color2?o(n.color2):this.color1,this.canvas=e,this.wgl=t,this.particlesWidth=0,this.particlesHeight=0,this.sphereRadius=10,this.wgl.getExtension("ANGLE_instanced_arrays"),this.depthExt=this.wgl.getExtension("WEBGL_depth_texture"),this.quadVertexBuffer=t.createBuffer(),t.bufferData(this.quadVertexBuffer,t.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,-1,1,1]),t.STATIC_DRAW);var a=this.sphereGeometry=function(e){var t=[],i=[],r=function(e,t){return Math.abs(e[0]-t[0])<.001&&Math.abs(e[1]-t[1])<.001&&Math.abs(e[2]-t[2])<.001},n=function(e){s.normalizeVector(e,e),t.push(e),i.push(e)},o=function(e,i){var o=[(e[0]+i[0])/2,(e[1]+i[1])/2,(e[2]+i[2])/2];s.normalizeVector(o,o);for(var a=0;a<t.length;++a)if(r(t[a],o))return a;return n(o),t.length-1},a=(1+Math.sqrt(5))/2;n([-1,a,0]),n([1,a,0]),n([-1,-a,0]),n([1,-a,0]),n([0,-1,a]),n([0,1,a]),n([0,-1,-a]),n([0,1,-a]),n([a,0,-1]),n([a,0,1]),n([-a,0,-1]),n([-a,0,1]);var u=[];u.push([0,11,5]),u.push([0,5,1]),u.push([0,1,7]),u.push([0,7,10]),u.push([0,10,11]),u.push([1,5,9]),u.push([5,11,4]),u.push([11,10,2]),u.push([10,7,6]),u.push([7,1,8]),u.push([3,9,4]),u.push([3,4,2]),u.push([3,2,6]),u.push([3,6,8]),u.push([3,8,9]),u.push([4,9,5]),u.push([2,4,11]),u.push([6,2,10]),u.push([8,6,7]),u.push([9,8,1]);for(var l=0;l<e;++l){var c=[];for(l=0;l<u.length;++l){var h=u[l],f=o(t[h[0]],t[h[1]]),d=o(t[h[1]],t[h[2]]),_=o(t[h[2]],t[h[0]]);c.push([h[0],f,_]),c.push([h[1],d,f]),c.push([h[2],_,d]),c.push([f,d,_])}u=c}var m=[],g=[],p=[];for(l=0;l<t.length;++l)m.push(t[l][0]),m.push(t[l][1]),m.push(t[l][2]),g.push(i[l][0]),g.push(i[l][1]),g.push(i[l][2]);for(l=0;l<u.length;++l){h=u[l];p.push(h[0]),p.push(h[1]),p.push(h[2])}return{vertices:m,normals:g,indices:p}}(3);this.sphereVertexBuffer=t.createBuffer(),t.bufferData(this.sphereVertexBuffer,t.ARRAY_BUFFER,new Float32Array(a.vertices),t.STATIC_DRAW),this.sphereNormalBuffer=t.createBuffer(),t.bufferData(this.sphereNormalBuffer,t.ARRAY_BUFFER,new Float32Array(a.normals),t.STATIC_DRAW),this.sphereIndexBuffer=t.createBuffer(),t.bufferData(this.sphereIndexBuffer,t.ELEMENT_ARRAY_BUFFER,new Uint16Array(a.indices),t.STATIC_DRAW),this.depthFramebuffer=t.createFramebuffer(),this.depthColorTexture=t.buildTexture(t.RGBA,t.UNSIGNED_BYTE,256,256,null,t.CLAMP_TO_EDGE,t.CLAMP_TO_EDGE,t.LINEAR,t.LINEAR),this.depthTexture=t.buildTexture(t.DEPTH_COMPONENT,t.UNSIGNED_SHORT,256,256,null,t.CLAMP_TO_EDGE,t.CLAMP_TO_EDGE,t.LINEAR,t.LINEAR),this.lightViewMatrix=new Float32Array(16);var u=[i[0]/4,i[1]/4,i[2]/4];s.makeLookAtMatrix(this.lightViewMatrix,u,[u[0],u[1]-1,u[2]],[0,0,1]),this.lightProjectionMatrix=s.makeOrthographicMatrix(new Float32Array(16),-i[0]/2,i[0]/2,-i[2]/2,i[2]/2,-i[1]/2,i[1]/2),this.lightProjectionViewMatrix=new Float32Array(16),s.premultiplyMatrix(this.lightProjectionViewMatrix,this.lightViewMatrix,this.lightProjectionMatrix),this.particleVertexBuffer=t.createBuffer(),this.renderingFramebuffer=t.createFramebuffer(),this.renderingRenderbuffer=t.createRenderbuffer(),this.renderingTexture=t.createTexture(),this.occlusionTexture=t.createTexture(),this.compositingTexture=t.createTexture(),this.onResize(),t.createProgramsFromFiles({sphereProgram:{vertexShader:"sphere.vert",fragmentShader:"sphere.frag"},sphereDepthProgram:{vertexShader:"spheredepth.vert",fragmentShader:"spheredepth.frag"},sphereAOProgram:{vertexShader:"sphereao.vert",fragmentShader:"sphereao.frag"},compositeProgram:{vertexShader:"fullscreen.vert",fragmentShader:"composite.frag",attributeLocations:{a_position:0}},fxaaProgram:{vertexShader:"fullscreen.vert",fragmentShader:"fxaa.frag",attributeLocations:{a_position:0}}},function(e){for(var t in e)this[t]=e[t];r()}.bind(this))}return e.prototype.onResize=function(e){wgl.renderbufferStorage(this.renderingRenderbuffer,wgl.RENDERBUFFER,wgl.DEPTH_COMPONENT16,this.canvas.width,this.canvas.height),wgl.rebuildTexture(this.renderingTexture,wgl.RGBA,wgl.FLOAT,this.canvas.width,this.canvas.height,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR),wgl.rebuildTexture(this.occlusionTexture,wgl.RGBA,wgl.UNSIGNED_BYTE,this.canvas.width,this.canvas.height,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR),wgl.rebuildTexture(this.compositingTexture,wgl.RGBA,wgl.UNSIGNED_BYTE,this.canvas.width,this.canvas.height,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR)},e.prototype.reset=function(e,t,i){this.particlesWidth=e,this.particlesHeight=t,this.sphereRadius=i;this.particlesWidth,this.particlesHeight;for(var r=new Float32Array(this.particlesWidth*this.particlesHeight*2),n=0;n<this.particlesHeight;++n)for(var o=0;o<this.particlesWidth;++o)r[2*(n*this.particlesWidth+o)]=(o+.5)/this.particlesWidth,r[2*(n*this.particlesWidth+o)+1]=(n+.5)/this.particlesHeight;wgl.bufferData(this.particleVertexBuffer,wgl.ARRAY_BUFFER,r,wgl.STATIC_DRAW)},e.prototype.draw=function(e,t,i){var r=this.wgl;s.premultiplyMatrix(new Float32Array(16),i,t);r.framebufferTexture2D(this.renderingFramebuffer,r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,this.renderingTexture,0),r.framebufferRenderbuffer(this.renderingFramebuffer,r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.RENDERBUFFER,this.renderingRenderbuffer),r.clear(r.createClearState().bindFramebuffer(this.renderingFramebuffer).clearColor(-99999,-99999,-99999,-99999),r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT);var n=r.createDrawState().bindFramebuffer(this.renderingFramebuffer).viewport(0,0,this.canvas.width,this.canvas.height).enable(r.DEPTH_TEST).enable(r.CULL_FACE).useProgram(this.sphereProgram).vertexAttribPointer(this.sphereVertexBuffer,this.sphereProgram.getAttribLocation("a_vertexPosition"),3,r.FLOAT,r.FALSE,0,0).vertexAttribPointer(this.sphereNormalBuffer,this.sphereProgram.getAttribLocation("a_vertexNormal"),3,r.FLOAT,r.FALSE,0,0).vertexAttribPointer(this.particleVertexBuffer,this.sphereProgram.getAttribLocation("a_textureCoordinates"),2,r.FLOAT,r.FALSE,0,0).vertexAttribDivisorANGLE(this.sphereProgram.getAttribLocation("a_textureCoordinates"),1).bindIndexBuffer(this.sphereIndexBuffer).uniformMatrix4fv("u_projectionMatrix",!1,t).uniformMatrix4fv("u_viewMatrix",!1,i).uniformTexture("u_positionsTexture",0,r.TEXTURE_2D,e.particlePositionTexture).uniformTexture("u_velocitiesTexture",1,r.TEXTURE_2D,e.particleVelocityTexture).uniform1f("u_sphereRadius",this.sphereRadius);r.drawElementsInstancedANGLE(n,r.TRIANGLES,this.sphereGeometry.indices.length,r.UNSIGNED_SHORT,0,this.particlesWidth*this.particlesHeight),r.framebufferTexture2D(this.renderingFramebuffer,r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,this.occlusionTexture,0),r.clear(r.createClearState().bindFramebuffer(this.renderingFramebuffer).clearColor(0,0,0,0),r.COLOR_BUFFER_BIT);var o=2*Math.atan(1/t[5]),a=r.createDrawState().bindFramebuffer(this.renderingFramebuffer).viewport(0,0,this.canvas.width,this.canvas.height).enable(r.DEPTH_TEST).depthMask(!1).enable(r.CULL_FACE).enable(r.BLEND).blendEquation(r.FUNC_ADD).blendFuncSeparate(r.ONE,r.ONE,r.ONE,r.ONE).useProgram(this.sphereAOProgram).vertexAttribPointer(this.sphereVertexBuffer,this.sphereAOProgram.getAttribLocation("a_vertexPosition"),3,r.FLOAT,r.FALSE,0,0).vertexAttribPointer(this.particleVertexBuffer,this.sphereAOProgram.getAttribLocation("a_textureCoordinates"),2,r.FLOAT,r.FALSE,0,0).vertexAttribDivisorANGLE(this.sphereAOProgram.getAttribLocation("a_textureCoordinates"),1).bindIndexBuffer(this.sphereIndexBuffer).uniformMatrix4fv("u_projectionMatrix",!1,t).uniformMatrix4fv("u_viewMatrix",!1,i).uniformTexture("u_positionsTexture",0,r.TEXTURE_2D,e.particlePositionTexture).uniformTexture("u_velocitiesTexture",1,r.TEXTURE_2D,e.particleVelocityTexture).uniformTexture("u_renderingTexture",2,r.TEXTURE_2D,this.renderingTexture).uniform2f("u_resolution",this.canvas.width,this.canvas.height).uniform1f("u_fov",o).uniform1f("u_sphereRadius",this.sphereRadius);r.drawElementsInstancedANGLE(a,r.TRIANGLES,this.sphereGeometry.indices.length,r.UNSIGNED_SHORT,0,this.particlesWidth*this.particlesHeight),r.framebufferTexture2D(this.depthFramebuffer,r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,this.depthColorTexture,0),r.framebufferTexture2D(this.depthFramebuffer,r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,this.depthTexture,0),r.clear(r.createClearState().bindFramebuffer(this.depthFramebuffer).clearColor(0,0,0,0),r.DEPTH_BUFFER_BIT);var u=r.createDrawState().bindFramebuffer(this.depthFramebuffer).viewport(0,0,256,256).enable(r.DEPTH_TEST).depthMask(!0).enable(r.SCISSOR_TEST).scissor(1,1,254,254).colorMask(!1,!1,!1,!1).enable(r.CULL_FACE).useProgram(this.sphereDepthProgram).vertexAttribPointer(this.sphereVertexBuffer,this.sphereDepthProgram.getAttribLocation("a_vertexPosition"),3,r.FLOAT,r.FALSE,0,0).vertexAttribPointer(this.particleVertexBuffer,this.sphereDepthProgram.getAttribLocation("a_textureCoordinates"),2,r.FLOAT,r.FALSE,0,0).vertexAttribDivisorANGLE(this.sphereDepthProgram.getAttribLocation("a_textureCoordinates"),1).bindIndexBuffer(this.sphereIndexBuffer).uniformMatrix4fv("u_projectionViewMatrix",!1,this.lightProjectionViewMatrix).uniformTexture("u_positionsTexture",0,r.TEXTURE_2D,e.particlePositionTexture).uniformTexture("u_velocitiesTexture",1,r.TEXTURE_2D,e.particleVelocityTexture).uniform1f("u_sphereRadius",this.sphereRadius);r.drawElementsInstancedANGLE(u,r.TRIANGLES,this.sphereGeometry.indices.length,r.UNSIGNED_SHORT,0,this.particlesWidth*this.particlesHeight);var l=s.invertMatrix(new Float32Array(16),i);r.framebufferTexture2D(this.renderingFramebuffer,r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,this.compositingTexture,0),r.clear(r.createClearState().bindFramebuffer(this.renderingFramebuffer).clearColor(0,0,0,0),r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT);var c=r.createDrawState().bindFramebuffer(this.renderingFramebuffer).viewport(0,0,this.canvas.width,this.canvas.height).useProgram(this.compositeProgram).vertexAttribPointer(this.quadVertexBuffer,0,2,r.FLOAT,r.FALSE,0,0).uniformTexture("u_renderingTexture",0,r.TEXTURE_2D,this.renderingTexture).uniformTexture("u_occlusionTexture",1,r.TEXTURE_2D,this.occlusionTexture).uniform2f("u_resolution",this.canvas.width,this.canvas.height).uniform1f("u_fov",o).uniform3f("u_color1",this.color1.r,this.color1.g,this.color1.b).uniform3f("u_color2",this.color2.r,this.color2.g,this.color2.b).uniformMatrix4fv("u_inverseViewMatrix",!1,l).uniformTexture("u_shadowDepthTexture",2,r.TEXTURE_2D,this.depthTexture).uniform2f("u_shadowResolution",256,256).uniformMatrix4fv("u_lightProjectionViewMatrix",!1,this.lightProjectionViewMatrix);r.drawArrays(c,r.TRIANGLE_STRIP,0,4);l=s.invertMatrix(new Float32Array(16),i);r.clear(r.createClearState().bindFramebuffer(null).clearColor(0,0,0,0),r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT);var h=r.createDrawState().bindFramebuffer(null).viewport(0,0,this.canvas.width,this.canvas.height).useProgram(this.fxaaProgram).vertexAttribPointer(this.quadVertexBuffer,0,2,r.FLOAT,r.FALSE,0,0).uniformTexture("u_input",0,r.TEXTURE_2D,this.compositingTexture).uniform2f("u_resolution",this.canvas.width,this.canvas.height);r.drawArrays(h,r.TRIANGLE_STRIP,0,4)},e}(),h=function(){function e(e,t){this.wgl=e,this.particlesWidth=0,this.particlesHeight=0,this.gridWidth=0,this.gridHeight=0,this.gridDepth=0,this.gridResolutionX=0,this.gridResolutionY=0,this.gridResolutionZ=0,this.particleDensity=0,this.velocityTextureWidth=0,this.velocityTextureHeight=0,this.scalarTextureWidth=0,this.scalarTextureHeight=0,this.halfFloatExt=this.wgl.getExtension("OES_texture_half_float"),this.wgl.getExtension("OES_texture_half_float_linear"),this.simulationNumberType=this.halfFloatExt.HALF_FLOAT_OES,this.flipness=.99,this.frameNumber=0,this.quadVertexBuffer=e.createBuffer(),e.bufferData(this.quadVertexBuffer,e.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,-1,1,1]),e.STATIC_DRAW),this.simulationFramebuffer=e.createFramebuffer(),this.particleVertexBuffer=e.createBuffer(),this.particlePositionTexture=e.createTexture(),this.particlePositionTextureTemp=e.createTexture(),this.particleVelocityTexture=e.createTexture(),this.particleVelocityTextureTemp=e.createTexture(),this.particleRandomTexture=e.createTexture(),this.velocityTexture=e.createTexture(),this.tempVelocityTexture=e.createTexture(),this.originalVelocityTexture=e.createTexture(),this.weightTexture=e.createTexture(),this.markerTexture=e.createTexture(),this.divergenceTexture=e.createTexture(),this.pressureTexture=e.createTexture(),this.tempSimulationTexture=e.createTexture(),e.createProgramsFromFiles({transferToGridProgram:{vertexShader:"transfertogrid.vert",fragmentShader:["common.frag","transfertogrid.frag"],attributeLocations:{a_textureCoordinates:0}},normalizeGridProgram:{vertexShader:"fullscreen.vert",fragmentShader:"normalizegrid.frag",attributeLocations:{a_position:0}},markProgram:{vertexShader:"mark.vert",fragmentShader:"mark.frag",attributeLocations:{a_textureCoordinates:0}},addForceProgram:{vertexShader:"fullscreen.vert",fragmentShader:["common.frag","addforce.frag"],attributeLocations:{a_position:0}},enforceBoundariesProgram:{vertexShader:"fullscreen.vert",fragmentShader:["common.frag","enforceboundaries.frag"],attributeLocations:{a_textureCoordinates:0}},extendVelocityProgram:{vertexShader:"fullscreen.vert",fragmentShader:"extendvelocity.frag",attributeLocations:{a_textureCoordinates:0}},transferToParticlesProgram:{vertexShader:"fullscreen.vert",fragmentShader:["common.frag","transfertoparticles.frag"],attributeLocations:{a_position:0}},divergenceProgram:{vertexShader:"fullscreen.vert",fragmentShader:["common.frag","divergence.frag"],attributeLocations:{a_position:0}},jacobiProgram:{vertexShader:"fullscreen.vert",fragmentShader:["common.frag","jacobi.frag"],attributeLocations:{a_position:0}},subtractProgram:{vertexShader:"fullscreen.vert",fragmentShader:["common.frag","subtract.frag"],attributeLocations:{a_position:0}},advectProgram:{vertexShader:"fullscreen.vert",fragmentShader:["common.frag","advect.frag"],attributeLocations:{a_position:0}},copyProgram:{vertexShader:"fullscreen.vert",fragmentShader:"copy.frag",attributeLocations:{a_position:0}}},function(e){for(var i in e)this[i]=e[i];t()}.bind(this))}function t(e,t,i){var r=e[t];e[t]=e[i],e[i]=r}return e.prototype.reset=function(e,t,i,r,n,o){this.particlesWidth=e,this.particlesHeight=t,this.gridWidth=r[0],this.gridHeight=r[1],this.gridDepth=r[2],this.gridResolutionX=n[0],this.gridResolutionY=n[1],this.gridResolutionZ=n[2],this.particleDensity=o,this.velocityTextureWidth=(this.gridResolutionX+1)*(this.gridResolutionZ+1),this.velocityTextureHeight=this.gridResolutionY+1,this.scalarTextureWidth=this.gridResolutionX*this.gridResolutionZ,this.scalarTextureHeight=this.gridResolutionY;this.particlesWidth,this.particlesHeight;for(var a=new Float32Array(this.particlesWidth*this.particlesHeight*2),s=0;s<this.particlesHeight;++s)for(var u=0;u<this.particlesWidth;++u)a[2*(s*this.particlesWidth+u)]=(u+.5)/this.particlesWidth,a[2*(s*this.particlesWidth+u)+1]=(s+.5)/this.particlesHeight;wgl.bufferData(this.particleVertexBuffer,wgl.ARRAY_BUFFER,a,wgl.STATIC_DRAW);for(var l=new Float32Array(this.particlesWidth*this.particlesHeight*4),c=new Float32Array(this.particlesWidth*this.particlesHeight*4),h=0;h<this.particlesWidth*this.particlesHeight;++h){l[4*h]=i[h][0],l[4*h+1]=i[h][1],l[4*h+2]=i[h][2],l[4*h+3]=0;var f=2*Math.random()*Math.PI,d=2*Math.random()-1;c[4*h]=Math.sqrt(1-d*d)*Math.cos(f),c[4*h+1]=Math.sqrt(1-d*d)*Math.sin(f),c[4*h+2]=d,c[4*h+3]=0}wgl.rebuildTexture(this.particlePositionTexture,wgl.RGBA,wgl.FLOAT,this.particlesWidth,this.particlesHeight,l,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.NEAREST,wgl.NEAREST),wgl.rebuildTexture(this.particlePositionTextureTemp,wgl.RGBA,wgl.FLOAT,this.particlesWidth,this.particlesHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.NEAREST,wgl.NEAREST),wgl.rebuildTexture(this.particleVelocityTexture,wgl.RGBA,this.simulationNumberType,this.particlesWidth,this.particlesHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.NEAREST,wgl.NEAREST),wgl.rebuildTexture(this.particleVelocityTextureTemp,wgl.RGBA,this.simulationNumberType,this.particlesWidth,this.particlesHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.NEAREST,wgl.NEAREST),wgl.rebuildTexture(this.particleRandomTexture,wgl.RGBA,wgl.FLOAT,this.particlesWidth,this.particlesHeight,c,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.NEAREST,wgl.NEAREST),wgl.rebuildTexture(this.velocityTexture,wgl.RGBA,this.simulationNumberType,this.velocityTextureWidth,this.velocityTextureHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR),wgl.rebuildTexture(this.tempVelocityTexture,wgl.RGBA,this.simulationNumberType,this.velocityTextureWidth,this.velocityTextureHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR),wgl.rebuildTexture(this.originalVelocityTexture,wgl.RGBA,this.simulationNumberType,this.velocityTextureWidth,this.velocityTextureHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR),wgl.rebuildTexture(this.weightTexture,wgl.RGBA,this.simulationNumberType,this.velocityTextureWidth,this.velocityTextureHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR),wgl.rebuildTexture(this.markerTexture,wgl.RGBA,wgl.UNSIGNED_BYTE,this.scalarTextureWidth,this.scalarTextureHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR),wgl.rebuildTexture(this.divergenceTexture,wgl.RGBA,this.simulationNumberType,this.scalarTextureWidth,this.scalarTextureHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR),wgl.rebuildTexture(this.pressureTexture,wgl.RGBA,this.simulationNumberType,this.scalarTextureWidth,this.scalarTextureHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR),wgl.rebuildTexture(this.tempSimulationTexture,wgl.RGBA,this.simulationNumberType,this.scalarTextureWidth,this.scalarTextureHeight,null,wgl.CLAMP_TO_EDGE,wgl.CLAMP_TO_EDGE,wgl.LINEAR,wgl.LINEAR)},e.prototype.simulate=function(e,i,r,n){if(0!==e){this.frameNumber+=1;var o=this.wgl,a=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.velocityTextureWidth,this.velocityTextureHeight).vertexAttribPointer(this.particleVertexBuffer,0,2,o.FLOAT,o.FALSE,0,0).useProgram(this.transferToGridProgram).uniform3f("u_gridResolution",this.gridResolutionX,this.gridResolutionY,this.gridResolutionZ).uniform3f("u_gridSize",this.gridWidth,this.gridHeight,this.gridDepth).uniformTexture("u_positionTexture",0,o.TEXTURE_2D,this.particlePositionTexture).uniformTexture("u_velocityTexture",1,o.TEXTURE_2D,this.particleVelocityTexture).enable(o.BLEND).blendEquation(o.FUNC_ADD).blendFuncSeparate(o.ONE,o.ONE,o.ONE,o.ONE);o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.weightTexture,0),o.clear(o.createClearState().bindFramebuffer(this.simulationFramebuffer).clearColor(0,0,0,0),o.COLOR_BUFFER_BIT),a.uniform1i("u_accumulate",0);for(var s=-2;s<=2;++s)a.uniform1f("u_zOffset",s),o.drawArrays(a,o.POINTS,0,this.particlesWidth*this.particlesHeight);o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.tempVelocityTexture,0),o.clear(o.createClearState().bindFramebuffer(this.simulationFramebuffer),o.COLOR_BUFFER_BIT),a.uniform1i("u_accumulate",1);for(s=-2;s<=2;++s)a.uniform1f("u_zOffset",s),o.drawArrays(a,o.POINTS,0,this.particlesWidth*this.particlesHeight);o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.velocityTexture,0);var u=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.velocityTextureWidth,this.velocityTextureHeight).vertexAttribPointer(this.quadVertexBuffer,0,2,o.FLOAT,o.FALSE,0,0).useProgram(this.normalizeGridProgram).uniformTexture("u_weightTexture",0,o.TEXTURE_2D,this.weightTexture).uniformTexture("u_accumulatedVelocityTexture",1,o.TEXTURE_2D,this.tempVelocityTexture);o.drawArrays(u,o.TRIANGLE_STRIP,0,4),o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.markerTexture,0),o.clear(o.createClearState().bindFramebuffer(this.simulationFramebuffer),o.COLOR_BUFFER_BIT);var l=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.scalarTextureWidth,this.scalarTextureHeight).vertexAttribPointer(this.particleVertexBuffer,0,2,o.FLOAT,o.FALSE,0,0).useProgram(this.markProgram).uniform3f("u_gridResolution",this.gridResolutionX,this.gridResolutionY,this.gridResolutionZ).uniform3f("u_gridSize",this.gridWidth,this.gridHeight,this.gridDepth).uniformTexture("u_positionTexture",0,o.TEXTURE_2D,this.particlePositionTexture);o.drawArrays(l,o.POINTS,0,this.particlesWidth*this.particlesHeight),o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.originalVelocityTexture,0);var c=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.velocityTextureWidth,this.velocityTextureHeight).vertexAttribPointer(this.quadVertexBuffer,0,2,o.FLOAT,o.FALSE,0,0).useProgram(this.copyProgram).uniformTexture("u_texture",0,o.TEXTURE_2D,this.velocityTexture);o.drawArrays(c,o.TRIANGLE_STRIP,0,4),o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.tempVelocityTexture,0);var h=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.velocityTextureWidth,this.velocityTextureHeight).vertexAttribPointer(this.quadVertexBuffer,0,2,o.FLOAT,o.FALSE,0,0).useProgram(this.addForceProgram).uniformTexture("u_velocityTexture",0,o.TEXTURE_2D,this.velocityTexture).uniform1f("u_timeStep",e).uniform3f("u_mouseVelocity",i[0],i[1],i[2]).uniform3f("u_gridResolution",this.gridResolutionX,this.gridResolutionY,this.gridResolutionZ).uniform3f("u_gridSize",this.gridWidth,this.gridHeight,this.gridDepth).uniform3f("u_mouseRayOrigin",r[0],r[1],r[2]).uniform3f("u_mouseRayDirection",n[0],n[1],n[2]);o.drawArrays(h,o.TRIANGLE_STRIP,0,4),t(this,"velocityTexture","tempVelocityTexture"),o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.tempVelocityTexture,0);var f=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.velocityTextureWidth,this.velocityTextureHeight).vertexAttribPointer(this.quadVertexBuffer,0,2,o.FLOAT,o.FALSE,0,0).useProgram(this.enforceBoundariesProgram).uniformTexture("u_velocityTexture",0,o.TEXTURE_2D,this.velocityTexture).uniform3f("u_gridResolution",this.gridResolutionX,this.gridResolutionY,this.gridResolutionZ);o.drawArrays(f,o.TRIANGLE_STRIP,0,4),t(this,"velocityTexture","tempVelocityTexture");var d=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.scalarTextureWidth,this.scalarTextureHeight).useProgram(this.divergenceProgram).uniform3f("u_gridResolution",this.gridResolutionX,this.gridResolutionY,this.gridResolutionZ).uniformTexture("u_velocityTexture",0,o.TEXTURE_2D,this.velocityTexture).uniformTexture("u_markerTexture",1,o.TEXTURE_2D,this.markerTexture).uniformTexture("u_weightTexture",2,o.TEXTURE_2D,this.weightTexture).uniform1f("u_maxDensity",this.particleDensity).vertexAttribPointer(this.quadVertexBuffer,0,2,o.FLOAT,!1,0,0);o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.divergenceTexture,0),o.clear(o.createClearState().bindFramebuffer(this.simulationFramebuffer),o.COLOR_BUFFER_BIT),o.drawArrays(d,o.TRIANGLE_STRIP,0,4);var _=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.scalarTextureWidth,this.scalarTextureHeight).useProgram(this.jacobiProgram).uniform3f("u_gridResolution",this.gridResolutionX,this.gridResolutionY,this.gridResolutionZ).uniformTexture("u_divergenceTexture",1,o.TEXTURE_2D,this.divergenceTexture).uniformTexture("u_markerTexture",2,o.TEXTURE_2D,this.markerTexture).vertexAttribPointer(this.quadVertexBuffer,0,2,o.FLOAT,!1,0,0);o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.pressureTexture,0),o.clear(o.createClearState().bindFramebuffer(this.simulationFramebuffer),o.COLOR_BUFFER_BIT);for(var m=0;m<50;++m)o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.tempSimulationTexture,0),_.uniformTexture("u_pressureTexture",0,o.TEXTURE_2D,this.pressureTexture),o.drawArrays(_,o.TRIANGLE_STRIP,0,4),t(this,"pressureTexture","tempSimulationTexture");o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.tempVelocityTexture,0);var g=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.velocityTextureWidth,this.velocityTextureHeight).useProgram(this.subtractProgram).uniform3f("u_gridResolution",this.gridResolutionX,this.gridResolutionY,this.gridResolutionZ).uniformTexture("u_pressureTexture",0,o.TEXTURE_2D,this.pressureTexture).uniformTexture("u_velocityTexture",1,o.TEXTURE_2D,this.velocityTexture).uniformTexture("u_markerTexture",2,o.TEXTURE_2D,this.markerTexture).vertexAttribPointer(this.quadVertexBuffer,0,2,o.FLOAT,!1,0,0);o.drawArrays(g,o.TRIANGLE_STRIP,0,4),t(this,"velocityTexture","tempVelocityTexture"),o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.particleVelocityTextureTemp,0);var p=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.particlesWidth,this.particlesHeight).vertexAttribPointer(this.quadVertexBuffer,0,2,o.FLOAT,o.FALSE,0,0).useProgram(this.transferToParticlesProgram).uniformTexture("u_particlePositionTexture",0,o.TEXTURE_2D,this.particlePositionTexture).uniformTexture("u_particleVelocityTexture",1,o.TEXTURE_2D,this.particleVelocityTexture).uniformTexture("u_gridVelocityTexture",2,o.TEXTURE_2D,this.velocityTexture).uniformTexture("u_originalGridVelocityTexture",3,o.TEXTURE_2D,this.originalVelocityTexture).uniform3f("u_gridResolution",this.gridResolutionX,this.gridResolutionY,this.gridResolutionZ).uniform3f("u_gridSize",this.gridWidth,this.gridHeight,this.gridDepth).uniform1f("u_flipness",this.flipness);o.drawArrays(p,o.TRIANGLE_STRIP,0,4),t(this,"particleVelocityTextureTemp","particleVelocityTexture"),o.framebufferTexture2D(this.simulationFramebuffer,o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,this.particlePositionTextureTemp,0),o.clear(o.createClearState().bindFramebuffer(this.simulationFramebuffer),o.COLOR_BUFFER_BIT);var T=o.createDrawState().bindFramebuffer(this.simulationFramebuffer).viewport(0,0,this.particlesWidth,this.particlesHeight).vertexAttribPointer(this.quadVertexBuffer,0,2,o.FLOAT,o.FALSE,0,0).useProgram(this.advectProgram).uniformTexture("u_positionsTexture",0,o.TEXTURE_2D,this.particlePositionTexture).uniformTexture("u_randomsTexture",1,o.TEXTURE_2D,this.particleRandomTexture).uniformTexture("u_velocityGrid",2,o.TEXTURE_2D,this.velocityTexture).uniform3f("u_gridResolution",this.gridResolutionX,this.gridResolutionY,this.gridResolutionZ).uniform3f("u_gridSize",this.gridWidth,this.gridHeight,this.gridDepth).uniform1f("u_timeStep",e).uniform1f("u_frameNumber",this.frameNumber).uniform2f("u_particlesResolution",this.particlesWidth,this.particlesHeight);o.drawArrays(T,o.TRIANGLE_STRIP,0,4),t(this,"particlePositionTextureTemp","particlePositionTexture")}},e}(),f=function(){function e(e,t,i,r,n,o,a){this.canvas=e,this.wgl=t,this.projectionMatrix=i,this.camera=r,t.getExtension("OES_texture_float"),t.getExtension("OES_texture_float_linear");var s=!1,u=!1;function l(){this.mouseX=0,this.mouseY=0,this.lastMousePlaneX=0,this.lastMousePlaneY=0,setTimeout(o,1)}this.renderer=new c(this.canvas,this.wgl,n,function(){(s=!0)&&u&&l.call(this)}.bind(this),a),this.simulator=new h(this.wgl,function(){u=!0,s&&u&&l.call(this)}.bind(this))}e.prototype.onMouseMove=function(e){var t=s.getMousePosition(e,this.canvas),i=t.x/this.canvas.width,r=t.y/this.canvas.height;this.mouseX=2*i-1,this.mouseY=2*(1-r)-1},e.prototype.reset=function(e,t,i,r,n,o,a){this.simulator.reset(e,t,i,r,n,o),this.renderer.reset(e,t,a)};var t=0;return e.prototype.update=function(e){var i=2*Math.atan(1/this.projectionMatrix[5]);t+=e;var r=[this.mouseX*Math.tan(i/2)*(this.canvas.width/this.canvas.height),this.mouseY*Math.tan(i/2),-1],n=r[0]*this.camera.distance,o=r[1]*this.camera.distance,a=n-this.lastMousePlaneX,u=o-this.lastMousePlaneY;t>5&&t<10&&(this.mouseX=1.4*Math.random()-.7,this.mouseY=-.45,a=50,u=100*Math.random()-50,t=0),this.lastMousePlaneX=n,this.lastMousePlaneY=o;var l=s.invertMatrix([],this.camera.getViewMatrix()),c=s.transformDirectionByMatrix([],r,l);s.normalizeVector(c,c);for(var h=this.camera.getViewMatrix(),f=[h[0],h[4],h[8]],d=[h[1],h[5],h[9]],_=[],m=0;m<3;++m)_[m]=a*f[m]+u*d[m];this.simulator.simulate(e,_,this.camera.getPosition(),c),this.renderer.draw(this.simulator,this.projectionMatrix,this.camera.getViewMatrix())},e.prototype.onResize=function(e){this.renderer.onResize(e)},e}(),d=function(){var e=Math.PI/3,t=0,i=1,r=60,n=40,o=4;function c(t,c,h,d){r=c.width||r,n=c.height||n,o=c.depth||o;var _=this.canvas=document.getElementById(t),m=this.wgl=new a(_);window.wgl=m,this.projectionMatrix=s.makePerspectiveMatrix(new Float32Array(16),e,this.canvas.width/this.canvas.height,.1,100),this.camera=new u(this.canvas,[r/2,n/3,o/2],h);var g=!1,p=!1;function T(e){this.state=i,this.currentPresetIndex=0,this.editedSinceLastPreset=!1;var t=[[new l.AABB([0,0,0],[15,20,20])]];this.editedSinceLastPreset=!1,this.boxEditor.boxes.length=0;for(var r=t[this.currentPresetIndex],n=0;n<r.length;++n)this.boxEditor.boxes.push(r[n].clone());this.gridCellDensity=.5,this.timeStep=1/60,_.addEventListener("mousemove",this.onMouseMove.bind(this)),window.addEventListener("resize",this.onResize.bind(this)),this.onResize();var o=0,a=function(e){var t=e-o||0;o=e,this.update(t),requestAnimationFrame(a)}.bind(this);a(),this.startSimulation(d.count,d.radius)}this.boxEditor=new l.BoxEditor(this.canvas,this.wgl,this.projectionMatrix,this.camera,[r,n,o],function(){(g=!0)&&p&&T.call(this)}.bind(this),function(){this.redrawUI()}.bind(this)),this.simulatorRenderer=new f(this.canvas,this.wgl,this.projectionMatrix,this.camera,[r,n,o],function(){p=!0,g&&p&&T.call(this)}.bind(this),d),this.startAnimation=function(){}.bind(this)}return c.prototype.onResize=function(t){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,s.makePerspectiveMatrix(this.projectionMatrix,e,this.canvas.width/this.canvas.height,.1,100),this.simulatorRenderer.onResize(t)},c.prototype.onMouseMove=function(e){e.preventDefault(),this.state===t?(this.boxEditor.onMouseMove(e),null!==this.boxEditor.interactionState&&(this.editedSinceLastPreset=!0)):this.state===i&&this.simulatorRenderer.onMouseMove(e)},c.prototype.getParticleCount=function(){for(var e=this.boxEditor,t=r*n*o*this.gridCellDensity,i=Math.ceil(Math.pow(t/2,1/3)),a=2*i*i*(1*i),s=0,u=[],l=0;l<e.boxes.length;++l){s+=e.boxes[l].computeVolume(),u[l]=s}return s/(r*n*o)*a*10},c.prototype.startSimulation=function(e,t){this.state=i;for(var a=e,s=Math.ceil(a/10),u=10*s,l=[],c=this.boxEditor,h=0,f=0;f<c.boxes.length;++f)h+=c.boxes[f].computeVolume();var d=0;for(f=0;f<c.boxes.length;++f){var _=c.boxes[f],m=0;m=f<c.boxes.length-1?Math.floor(u*_.computeVolume()/h):u-d;for(var g=0;g<m;++g){var p=_.randomPoint();l.push(p)}d+=m}var T=r*n*o*this.gridCellDensity,x=Math.ceil(Math.pow(T/2,1/3)),v=2*x,E=[r,n,o],R=[v,x,1*x],A=t/v;this.simulatorRenderer.reset(10,s,l,E,R,10,A),this.camera.setBounds(0,Math.PI/2)},c.prototype.stopSimulation=function(){this.state=t,this.camera.setBounds(-Math.PI/4,Math.PI/4)},c.prototype.update=function(){this.state===t?this.boxEditor.draw():this.state===i&&this.simulatorRenderer.update(this.timeStep)},c}();function _(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function m(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?_(Object(i),!0).forEach((function(t){p(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):_(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var T={width:60,heigth:40,depth:4},x={distance:24,azimuth:-.009999999990000001,elevation:.004999999999999998},v={count:6e3,radius:7,color1:"#9466ff",color2:"#ff5e2d"},E=function e(){var t=this,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};g(this,e),p(this,"initScene",(function(e){t.fluidBox=new d(e,t.initData.scene,t.initData.camera,t.initData.particles)})),p(this,"isEnableScene",(function(){var e=/Android|webOS|iPhone|iPad|iPod|Opera Mini/i.test(navigator.userAgent),t=document.createElement("canvas"),i=null;try{i=t.getContext("webgl")||t.getContext("experimental-webgl")}catch(e){return!1}return null!==i&&!e})),p(this,"startAnimation",(function(){fluidBox&&fluidBox.startSimulation()})),p(this,"stopAnimation",(function(){fluidBox&&fluidBox.stopSimulation()})),this.fluidBox=null,this.initData={scene:m({},T,{},i),camera:m({},x,{},r),particles:m({},v,{},n)}}}])}));